-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK.vhd
-- Created: 2025-09-17 13:28:21
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK
-- Source Path: QPSK
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY QPSK IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        Tile0_ADC_Ch0_I_TData             :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        Tile0_ADC_Ch0_Q_TData             :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        Tile0_ADC_Ch0_IQ_Valid            :   IN    std_logic;  -- ufix1
        AXI4_Stream_DMA_Master_TREADY     :   IN    std_logic;  -- ufix1
        AXI4_Stream_DMA_Slave_TDATA       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Stream_DMA_Slave_TVALID      :   IN    std_logic;  -- ufix1
        AXI4_Lite_ACLK                    :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARESETN                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_AWADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_AWVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_WDATA                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_WSTRB                   :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_Lite_WVALID                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_BREADY                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_ARVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_RREADY                  :   IN    std_logic;  -- ufix1
        Tile0_DAC_Ch0_I_TData             :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
        Tile0_DAC_Ch0_Q_TData             :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
        Tile0_DAC_Ch0_TValid              :   OUT   std_logic;  -- ufix1
        AXI4_Stream_DMA_Master_TDATA      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Stream_DMA_Master_TVALID     :   OUT   std_logic;  -- ufix1
        AXI4_Stream_DMA_Master_TLAST      :   OUT   std_logic;  -- ufix1
        AXI4_Stream_DMA_Slave_TREADY      :   OUT   std_logic;  -- ufix1
        AXI4_Lite_AWREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_WREADY                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_BRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_BVALID                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_ARREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_RDATA                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_RRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_RVALID                  :   OUT   std_logic  -- ufix1
        );
END QPSK;


ARCHITECTURE rtl OF QPSK IS

  -- Component Declarations
  COMPONENT QPSK_axi4_stream_dma_master
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          AXI4_Stream_DMA_Master_TREADY   :   IN    std_logic;  -- ufix1
          user_data                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          user_valid                      :   IN    std_logic;  -- ufix1
          user_TLAST                      :   IN    std_logic;  -- ufix1
          AXI4_Stream_DMA_Master_TDATA    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Stream_DMA_Master_TVALID   :   OUT   std_logic;  -- ufix1
          AXI4_Stream_DMA_Master_TLAST    :   OUT   std_logic;  -- ufix1
          user_ready                      :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT QPSK_axi4_stream_dma_slave
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          AXI4_Stream_DMA_Slave_TDATA     :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Stream_DMA_Slave_TVALID    :   IN    std_logic;  -- ufix1
          user_ready                      :   IN    std_logic;  -- ufix1
          AXI4_Stream_DMA_Slave_TREADY    :   OUT   std_logic;  -- ufix1
          user_data                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          user_valid                      :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT QPSK_reset_sync
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_in                        :   IN    std_logic;  -- ufix1
          reset_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT QPSK_axi_lite
    PORT( reset                           :   IN    std_logic;
          AXI4_Lite_ACLK                  :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARESETN               :   IN    std_logic;  -- ufix1
          AXI4_Lite_AWADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_AWVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_WDATA                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_WSTRB                 :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_Lite_WVALID                :   IN    std_logic;  -- ufix1
          AXI4_Lite_BREADY                :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_ARVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_RREADY                :   IN    std_logic;  -- ufix1
          read_ip_timestamp               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_regOut_rx_nSynced          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_regOut_rx_normCoarseFreqEst :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En21
          AXI4_Lite_AWREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_WREADY                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_BRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_BVALID                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_ARREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_RDATA                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_RRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_RVALID                :   OUT   std_logic;  -- ufix1
          write_axi_enable                :   OUT   std_logic;  -- ufix1
          write_regIn_tx_enable           :   OUT   std_logic;  -- ufix1
          write_regIn_rx_reset_cs         :   OUT   std_logic;  -- ufix1
          write_regIn_rx_src_sel          :   OUT   std_logic;  -- ufix1
          write_regIn_capture_start       :   OUT   std_logic;  -- ufix1
          write_regIn_capture_length      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_regIn_capture_src_sel     :   OUT   std_logic;  -- ufix1
          write_regIn_tx_output_gain      :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          write_regIn_rx_input_gain       :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          write_regIn_capture_mode        :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT QPSK_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          mm2sData                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          mm2sValid                       :   IN    std_logic;  -- ufix1
          adcDataI_0                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          adcDataI_1                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          adcDataI_2                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          adcDataI_3                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          adcDataQ_0                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          adcDataQ_1                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          adcDataQ_2                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          adcDataQ_3                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
          adcValid                        :   IN    std_logic;  -- ufix1
          regIn_tx_enable                 :   IN    std_logic;  -- ufix1
          regIn_rx_reset_cs               :   IN    std_logic;  -- ufix1
          regIn_rx_src_sel                :   IN    std_logic;  -- ufix1
          regIn_capture_start             :   IN    std_logic;  -- ufix1
          regIn_capture_length            :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          regIn_capture_src_sel           :   IN    std_logic;  -- ufix1
          regIn_tx_output_gain            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          regIn_rx_input_gain             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          regIn_capture_mode              :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          s2mmReady                       :   IN    std_logic;  -- ufix1
          ce_out                          :   OUT   std_logic;  -- ufix1
          s2mmData                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          s2mmValid                       :   OUT   std_logic;  -- ufix1
          s2mmLast                        :   OUT   std_logic;  -- ufix1
          dacDataI_0                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          dacDataI_1                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          dacDataI_2                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          dacDataI_3                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          dacDataQ_0                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          dacDataQ_1                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          dacDataQ_2                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          dacDataQ_3                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
          dacValid                        :   OUT   std_logic;  -- ufix1
          regOut_rx_nSynced               :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          regOut_rx_normCoarseFreqEst     :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En21
          mm2sReady                       :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : QPSK_axi4_stream_dma_master
    USE ENTITY work.QPSK_axi4_stream_dma_master(rtl);

  FOR ALL : QPSK_axi4_stream_dma_slave
    USE ENTITY work.QPSK_axi4_stream_dma_slave(rtl);

  FOR ALL : QPSK_reset_sync
    USE ENTITY work.QPSK_reset_sync(rtl);

  FOR ALL : QPSK_axi_lite
    USE ENTITY work.QPSK_axi_lite(rtl);

  FOR ALL : QPSK_dut
    USE ENTITY work.QPSK_dut(rtl);

  -- Signals
  SIGNAL reset                            : std_logic;
  SIGNAL ip_timestamp                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL const_1_1                        : std_logic;  -- ufix1
  SIGNAL Tile0_ADC_Ch0_I_TData_unsigned   : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Tile0_ADC_Ch0_I_TData_slice      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL adcDataI_0_sig                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Tile0_ADC_Ch0_I_TData_slice_1    : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL adcDataI_1_sig                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Tile0_ADC_Ch0_I_TData_slice_2    : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL adcDataI_2_sig                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Tile0_ADC_Ch0_I_TData_slice_3    : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL adcDataI_3_sig                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Tile0_ADC_Ch0_Q_TData_unsigned   : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Tile0_ADC_Ch0_Q_TData_slice      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL adcDataQ_0_sig                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Tile0_ADC_Ch0_Q_TData_slice_1    : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL adcDataQ_1_sig                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Tile0_ADC_Ch0_Q_TData_slice_2    : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL adcDataQ_2_sig                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Tile0_ADC_Ch0_Q_TData_slice_3    : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL adcDataQ_3_sig                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL s2mmData_sig                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s2mmValid_sig                    : std_logic;  -- ufix1
  SIGNAL s2mmLast_sig                     : std_logic;  -- ufix1
  SIGNAL AXI4_Stream_DMA_Master_TDATA_tmp : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL top_user_ready                   : std_logic;  -- ufix1
  SIGNAL mm2sReady_sig                    : std_logic;  -- ufix1
  SIGNAL top_user_data                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL top_user_valid                   : std_logic;  -- ufix1
  SIGNAL reset_internal                   : std_logic;  -- ufix1
  SIGNAL reset_before_sync                : std_logic;  -- ufix1
  SIGNAL regOut_rx_nSynced_sig            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL regOut_rx_normCoarseFreqEst_sig  : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL AXI4_Lite_BRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_Lite_RDATA_tmp              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_RRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL write_axi_enable                 : std_logic;  -- ufix1
  SIGNAL write_regIn_tx_enable            : std_logic;  -- ufix1
  SIGNAL write_regIn_rx_reset_cs          : std_logic;  -- ufix1
  SIGNAL write_regIn_rx_src_sel           : std_logic;  -- ufix1
  SIGNAL write_regIn_capture_start        : std_logic;  -- ufix1
  SIGNAL write_regIn_capture_length       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_regIn_capture_src_sel      : std_logic;  -- ufix1
  SIGNAL write_regIn_tx_output_gain       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL write_regIn_rx_input_gain        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL write_regIn_capture_mode         : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL dacDataI_0_sig                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dacDataI_1_sig                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dacDataI_2_sig                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dacDataI_3_sig                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dacDataQ_0_sig                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dacDataQ_1_sig                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dacDataQ_2_sig                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dacDataQ_3_sig                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dacValid_sig                     : std_logic;  -- ufix1
  SIGNAL dacDataI_3_sig_signed            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dacDataI_2_sig_signed            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dacDataI_1_sig_signed            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dacDataI_0_sig_signed            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Tile0_DAC_Ch0_I_TData_tmp        : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL dacDataQ_3_sig_signed            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dacDataQ_2_sig_signed            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dacDataQ_1_sig_signed            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dacDataQ_0_sig_signed            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Tile0_DAC_Ch0_Q_TData_tmp        : unsigned(63 DOWNTO 0);  -- ufix64

BEGIN
  u_QPSK_axi4_stream_dma_master_inst : QPSK_axi4_stream_dma_master
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              enb => const_1_1,
              AXI4_Stream_DMA_Master_TREADY => AXI4_Stream_DMA_Master_TREADY,  -- ufix1
              user_data => s2mmData_sig,  -- ufix32
              user_valid => s2mmValid_sig,  -- ufix1
              user_TLAST => s2mmLast_sig,  -- ufix1
              AXI4_Stream_DMA_Master_TDATA => AXI4_Stream_DMA_Master_TDATA_tmp,  -- ufix32
              AXI4_Stream_DMA_Master_TVALID => AXI4_Stream_DMA_Master_TVALID,  -- ufix1
              AXI4_Stream_DMA_Master_TLAST => AXI4_Stream_DMA_Master_TLAST,  -- ufix1
              user_ready => top_user_ready  -- ufix1
              );

  u_QPSK_axi4_stream_dma_slave_inst : QPSK_axi4_stream_dma_slave
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              enb => const_1_1,
              AXI4_Stream_DMA_Slave_TDATA => AXI4_Stream_DMA_Slave_TDATA,  -- ufix32
              AXI4_Stream_DMA_Slave_TVALID => AXI4_Stream_DMA_Slave_TVALID,  -- ufix1
              user_ready => mm2sReady_sig,  -- ufix1
              AXI4_Stream_DMA_Slave_TREADY => AXI4_Stream_DMA_Slave_TREADY,  -- ufix1
              user_data => top_user_data,  -- ufix32
              user_valid => top_user_valid  -- ufix1
              );

  u_QPSK_reset_sync_inst : QPSK_reset_sync
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_in => reset_before_sync,  -- ufix1
              reset_out => reset
              );

  u_QPSK_axi_lite_inst : QPSK_axi_lite
    PORT MAP( reset => reset,
              AXI4_Lite_ACLK => AXI4_Lite_ACLK,  -- ufix1
              AXI4_Lite_ARESETN => AXI4_Lite_ARESETN,  -- ufix1
              AXI4_Lite_AWADDR => AXI4_Lite_AWADDR,  -- ufix16
              AXI4_Lite_AWVALID => AXI4_Lite_AWVALID,  -- ufix1
              AXI4_Lite_WDATA => AXI4_Lite_WDATA,  -- ufix32
              AXI4_Lite_WSTRB => AXI4_Lite_WSTRB,  -- ufix4
              AXI4_Lite_WVALID => AXI4_Lite_WVALID,  -- ufix1
              AXI4_Lite_BREADY => AXI4_Lite_BREADY,  -- ufix1
              AXI4_Lite_ARADDR => AXI4_Lite_ARADDR,  -- ufix16
              AXI4_Lite_ARVALID => AXI4_Lite_ARVALID,  -- ufix1
              AXI4_Lite_RREADY => AXI4_Lite_RREADY,  -- ufix1
              read_ip_timestamp => std_logic_vector(ip_timestamp),  -- ufix32
              read_regOut_rx_nSynced => regOut_rx_nSynced_sig,  -- ufix32
              read_regOut_rx_normCoarseFreqEst => regOut_rx_normCoarseFreqEst_sig,  -- sfix21_En21
              AXI4_Lite_AWREADY => AXI4_Lite_AWREADY,  -- ufix1
              AXI4_Lite_WREADY => AXI4_Lite_WREADY,  -- ufix1
              AXI4_Lite_BRESP => AXI4_Lite_BRESP_tmp,  -- ufix2
              AXI4_Lite_BVALID => AXI4_Lite_BVALID,  -- ufix1
              AXI4_Lite_ARREADY => AXI4_Lite_ARREADY,  -- ufix1
              AXI4_Lite_RDATA => AXI4_Lite_RDATA_tmp,  -- ufix32
              AXI4_Lite_RRESP => AXI4_Lite_RRESP_tmp,  -- ufix2
              AXI4_Lite_RVALID => AXI4_Lite_RVALID,  -- ufix1
              write_axi_enable => write_axi_enable,  -- ufix1
              write_regIn_tx_enable => write_regIn_tx_enable,  -- ufix1
              write_regIn_rx_reset_cs => write_regIn_rx_reset_cs,  -- ufix1
              write_regIn_rx_src_sel => write_regIn_rx_src_sel,  -- ufix1
              write_regIn_capture_start => write_regIn_capture_start,  -- ufix1
              write_regIn_capture_length => write_regIn_capture_length,  -- ufix32
              write_regIn_capture_src_sel => write_regIn_capture_src_sel,  -- ufix1
              write_regIn_tx_output_gain => write_regIn_tx_output_gain,  -- sfix18_En15
              write_regIn_rx_input_gain => write_regIn_rx_input_gain,  -- sfix18_En15
              write_regIn_capture_mode => write_regIn_capture_mode,  -- ufix2
              reset_internal => reset_internal  -- ufix1
              );

  u_QPSK_dut_inst : QPSK_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              dut_enable => write_axi_enable,  -- ufix1
              mm2sData => top_user_data,  -- ufix32
              mm2sValid => top_user_valid,  -- ufix1
              adcDataI_0 => std_logic_vector(adcDataI_0_sig),  -- sfix16
              adcDataI_1 => std_logic_vector(adcDataI_1_sig),  -- sfix16
              adcDataI_2 => std_logic_vector(adcDataI_2_sig),  -- sfix16
              adcDataI_3 => std_logic_vector(adcDataI_3_sig),  -- sfix16
              adcDataQ_0 => std_logic_vector(adcDataQ_0_sig),  -- sfix16
              adcDataQ_1 => std_logic_vector(adcDataQ_1_sig),  -- sfix16
              adcDataQ_2 => std_logic_vector(adcDataQ_2_sig),  -- sfix16
              adcDataQ_3 => std_logic_vector(adcDataQ_3_sig),  -- sfix16
              adcValid => Tile0_ADC_Ch0_IQ_Valid,  -- ufix1
              regIn_tx_enable => write_regIn_tx_enable,  -- ufix1
              regIn_rx_reset_cs => write_regIn_rx_reset_cs,  -- ufix1
              regIn_rx_src_sel => write_regIn_rx_src_sel,  -- ufix1
              regIn_capture_start => write_regIn_capture_start,  -- ufix1
              regIn_capture_length => write_regIn_capture_length,  -- ufix32
              regIn_capture_src_sel => write_regIn_capture_src_sel,  -- ufix1
              regIn_tx_output_gain => write_regIn_tx_output_gain,  -- sfix18_En15
              regIn_rx_input_gain => write_regIn_rx_input_gain,  -- sfix18_En15
              regIn_capture_mode => write_regIn_capture_mode,  -- ufix2
              s2mmReady => top_user_ready,  -- ufix1
              ce_out => ce_out_sig,  -- ufix1
              s2mmData => s2mmData_sig,  -- ufix32
              s2mmValid => s2mmValid_sig,  -- ufix1
              s2mmLast => s2mmLast_sig,  -- ufix1
              dacDataI_0 => dacDataI_0_sig,  -- sfix16
              dacDataI_1 => dacDataI_1_sig,  -- sfix16
              dacDataI_2 => dacDataI_2_sig,  -- sfix16
              dacDataI_3 => dacDataI_3_sig,  -- sfix16
              dacDataQ_0 => dacDataQ_0_sig,  -- sfix16
              dacDataQ_1 => dacDataQ_1_sig,  -- sfix16
              dacDataQ_2 => dacDataQ_2_sig,  -- sfix16
              dacDataQ_3 => dacDataQ_3_sig,  -- sfix16
              dacValid => dacValid_sig,  -- ufix1
              regOut_rx_nSynced => regOut_rx_nSynced_sig,  -- ufix32
              regOut_rx_normCoarseFreqEst => regOut_rx_normCoarseFreqEst_sig,  -- sfix21_En21
              mm2sReady => mm2sReady_sig  -- ufix1
              );

  ip_timestamp <= unsigned'(X"958EEA80");

  reset_cm <=  NOT IPCORE_RESETN;

  const_1_1 <= '1';

  Tile0_ADC_Ch0_I_TData_unsigned <= unsigned(Tile0_ADC_Ch0_I_TData);

  Tile0_ADC_Ch0_I_TData_slice <= Tile0_ADC_Ch0_I_TData_unsigned(15 DOWNTO 0);

  adcDataI_0_sig <= signed(Tile0_ADC_Ch0_I_TData_slice);

  Tile0_ADC_Ch0_I_TData_slice_1 <= Tile0_ADC_Ch0_I_TData_unsigned(31 DOWNTO 16);

  adcDataI_1_sig <= signed(Tile0_ADC_Ch0_I_TData_slice_1);

  Tile0_ADC_Ch0_I_TData_slice_2 <= Tile0_ADC_Ch0_I_TData_unsigned(47 DOWNTO 32);

  adcDataI_2_sig <= signed(Tile0_ADC_Ch0_I_TData_slice_2);

  Tile0_ADC_Ch0_I_TData_slice_3 <= Tile0_ADC_Ch0_I_TData_unsigned(63 DOWNTO 48);

  adcDataI_3_sig <= signed(Tile0_ADC_Ch0_I_TData_slice_3);

  Tile0_ADC_Ch0_Q_TData_unsigned <= unsigned(Tile0_ADC_Ch0_Q_TData);

  Tile0_ADC_Ch0_Q_TData_slice <= Tile0_ADC_Ch0_Q_TData_unsigned(15 DOWNTO 0);

  adcDataQ_0_sig <= signed(Tile0_ADC_Ch0_Q_TData_slice);

  Tile0_ADC_Ch0_Q_TData_slice_1 <= Tile0_ADC_Ch0_Q_TData_unsigned(31 DOWNTO 16);

  adcDataQ_1_sig <= signed(Tile0_ADC_Ch0_Q_TData_slice_1);

  Tile0_ADC_Ch0_Q_TData_slice_2 <= Tile0_ADC_Ch0_Q_TData_unsigned(47 DOWNTO 32);

  adcDataQ_2_sig <= signed(Tile0_ADC_Ch0_Q_TData_slice_2);

  Tile0_ADC_Ch0_Q_TData_slice_3 <= Tile0_ADC_Ch0_Q_TData_unsigned(63 DOWNTO 48);

  adcDataQ_3_sig <= signed(Tile0_ADC_Ch0_Q_TData_slice_3);

  reset_before_sync <= reset_cm OR reset_internal;

  dacDataI_3_sig_signed <= signed(dacDataI_3_sig);

  dacDataI_2_sig_signed <= signed(dacDataI_2_sig);

  dacDataI_1_sig_signed <= signed(dacDataI_1_sig);

  dacDataI_0_sig_signed <= signed(dacDataI_0_sig);

  Tile0_DAC_Ch0_I_TData_tmp <= unsigned(dacDataI_3_sig_signed) & unsigned(dacDataI_2_sig_signed) & unsigned(dacDataI_1_sig_signed) & unsigned(dacDataI_0_sig_signed);

  Tile0_DAC_Ch0_I_TData <= std_logic_vector(Tile0_DAC_Ch0_I_TData_tmp);

  dacDataQ_3_sig_signed <= signed(dacDataQ_3_sig);

  dacDataQ_2_sig_signed <= signed(dacDataQ_2_sig);

  dacDataQ_1_sig_signed <= signed(dacDataQ_1_sig);

  dacDataQ_0_sig_signed <= signed(dacDataQ_0_sig);

  Tile0_DAC_Ch0_Q_TData_tmp <= unsigned(dacDataQ_3_sig_signed) & unsigned(dacDataQ_2_sig_signed) & unsigned(dacDataQ_1_sig_signed) & unsigned(dacDataQ_0_sig_signed);

  Tile0_DAC_Ch0_Q_TData <= std_logic_vector(Tile0_DAC_Ch0_Q_TData_tmp);

  Tile0_DAC_Ch0_TValid <= dacValid_sig;

  AXI4_Stream_DMA_Master_TDATA <= AXI4_Stream_DMA_Master_TDATA_tmp;

  AXI4_Lite_BRESP <= AXI4_Lite_BRESP_tmp;

  AXI4_Lite_RDATA <= AXI4_Lite_RDATA_tmp;

  AXI4_Lite_RRESP <= AXI4_Lite_RRESP_tmp;

END rtl;

