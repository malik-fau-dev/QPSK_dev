-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_src_FilterBank.vhd
-- Created: 2025-09-17 13:27:52
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_src_FilterBank
-- Source Path: hdlcoder_QPSKTxRx_RFSoC/QPSK/From ADC/Vector Decimation/FIR Decimator/FilterBank
-- Hierarchy Level: 4
-- Model version: 9.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.QPSK_src_QPSK_pkg.ALL;

ENTITY QPSK_src_FilterBank IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        filterIn_re                       :   IN    vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En14 [4]
        filterIn_im                       :   IN    vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En14 [4]
        validIn                           :   IN    std_logic;
        filterOut_re                      :   OUT   vector_of_std_logic_vector33(0 TO 3);  -- sfix33_En30 [4]
        filterOut_im                      :   OUT   vector_of_std_logic_vector33(0 TO 3);  -- sfix33_En30 [4]
        filterOut_vld                     :   OUT   std_logic
        );
END QPSK_src_FilterBank;


ARCHITECTURE rtl OF QPSK_src_FilterBank IS

  -- Component Declarations
  COMPONENT QPSK_src_FilterCoef
    PORT( CoefOut                         :   OUT   vector_of_std_logic_vector16(0 TO 15)  -- sfix16_En16 [16]
          );
  END COMPONENT;

  COMPONENT QPSK_src_subFilter
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinReg2_0_re                    :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          coefIn                          :   IN    vector_of_std_logic_vector16(0 TO 15);  -- sfix16_En16 [16]
          dinRegVld                       :   IN    std_logic;
          syncReset                       :   IN    std_logic;
          dout_1_re                       :   OUT   std_logic_vector(32 DOWNTO 0)  -- sfix33_En30
          );
  END COMPONENT;

  COMPONENT QPSK_src_FilterCoef_block
    PORT( CoefOut                         :   OUT   vector_of_std_logic_vector16(0 TO 15)  -- sfix16_En16 [16]
          );
  END COMPONENT;

  COMPONENT QPSK_src_subFilter_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinReg2_1_re                    :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          coefIn                          :   IN    vector_of_std_logic_vector16(0 TO 15);  -- sfix16_En16 [16]
          dinRegVld                       :   IN    std_logic;
          syncReset                       :   IN    std_logic;
          dout_2_re                       :   OUT   std_logic_vector(32 DOWNTO 0)  -- sfix33_En30
          );
  END COMPONENT;

  COMPONENT QPSK_src_FilterCoef_block1
    PORT( CoefOut                         :   OUT   vector_of_std_logic_vector16(0 TO 15)  -- sfix16_En16 [16]
          );
  END COMPONENT;

  COMPONENT QPSK_src_subFilter_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinReg2_2_re                    :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          coefIn                          :   IN    vector_of_std_logic_vector16(0 TO 15);  -- sfix16_En16 [16]
          dinRegVld                       :   IN    std_logic;
          syncReset                       :   IN    std_logic;
          dout_3_re                       :   OUT   std_logic_vector(32 DOWNTO 0)  -- sfix33_En30
          );
  END COMPONENT;

  COMPONENT QPSK_src_FilterCoef_block2
    PORT( CoefOut                         :   OUT   vector_of_std_logic_vector16(0 TO 15)  -- sfix16_En16 [16]
          );
  END COMPONENT;

  COMPONENT QPSK_src_subFilter_block2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinReg2_3_re                    :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          coefIn                          :   IN    vector_of_std_logic_vector16(0 TO 15);  -- sfix16_En16 [16]
          dinRegVld                       :   IN    std_logic;
          syncReset                       :   IN    std_logic;
          dout_4_re                       :   OUT   std_logic_vector(32 DOWNTO 0);  -- sfix33_En30
          doutVld                         :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : QPSK_src_FilterCoef
    USE ENTITY work.QPSK_src_FilterCoef(rtl);

  FOR ALL : QPSK_src_subFilter
    USE ENTITY work.QPSK_src_subFilter(rtl);

  FOR ALL : QPSK_src_FilterCoef_block
    USE ENTITY work.QPSK_src_FilterCoef_block(rtl);

  FOR ALL : QPSK_src_subFilter_block
    USE ENTITY work.QPSK_src_subFilter_block(rtl);

  FOR ALL : QPSK_src_FilterCoef_block1
    USE ENTITY work.QPSK_src_FilterCoef_block1(rtl);

  FOR ALL : QPSK_src_subFilter_block1
    USE ENTITY work.QPSK_src_subFilter_block1(rtl);

  FOR ALL : QPSK_src_FilterCoef_block2
    USE ENTITY work.QPSK_src_FilterCoef_block2(rtl);

  FOR ALL : QPSK_src_subFilter_block2
    USE ENTITY work.QPSK_src_subFilter_block2(rtl);

  -- Signals
  SIGNAL syncReset                        : std_logic;
  SIGNAL dinRegVld                        : std_logic;
  SIGNAL filterIn_0_re                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL filterIn_0_im                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dinReg_0_re                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dinReg2_0_re                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL CoefOut                          : vector_of_std_logic_vector16(0 TO 15);  -- ufix16 [16]
  SIGNAL dinReg2Vld                       : std_logic;
  SIGNAL filterIn_1_re                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL filterIn_1_im                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dinReg_1_re                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dinReg2_1_re                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL CoefOut_1                        : vector_of_std_logic_vector16(0 TO 15);  -- ufix16 [16]
  SIGNAL filterIn_2_re                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL filterIn_2_im                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dinReg_2_re                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dinReg2_2_re                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL CoefOut_2                        : vector_of_std_logic_vector16(0 TO 15);  -- ufix16 [16]
  SIGNAL filterIn_3_re                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL filterIn_3_im                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dinReg_3_re                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dinReg2_3_re                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL CoefOut_3                        : vector_of_std_logic_vector16(0 TO 15);  -- ufix16 [16]
  SIGNAL doutVld                          : std_logic;
  SIGNAL filterOut_re_tmp                 : vector_of_std_logic_vector33(0 TO 3);  -- ufix33 [4]
  SIGNAL dinReg_0_im                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dinReg2_0_im                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dinReg_1_im                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dinReg2_1_im                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dinReg_2_im                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dinReg2_2_im                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dinReg_3_im                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dinReg2_3_im                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL doutVlddeadOut                   : std_logic;
  SIGNAL filterOut_im_tmp                 : vector_of_std_logic_vector33(0 TO 3);  -- ufix33 [4]

BEGIN
  u_CoefTable_1 : QPSK_src_FilterCoef
    PORT MAP( CoefOut => CoefOut  -- sfix16_En16 [16]
              );

  u_subFilter_1_re : QPSK_src_subFilter
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dinReg2_0_re => std_logic_vector(dinReg2_0_re),  -- sfix16_En14
              coefIn => CoefOut,  -- sfix16_En16 [16]
              dinRegVld => dinReg2Vld,
              syncReset => syncReset,
              dout_1_re => filterOut_re_tmp(0)  -- sfix33_En30
              );

  u_CoefTable_2 : QPSK_src_FilterCoef_block
    PORT MAP( CoefOut => CoefOut_1  -- sfix16_En16 [16]
              );

  u_subFilter_2_re : QPSK_src_subFilter_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dinReg2_1_re => std_logic_vector(dinReg2_1_re),  -- sfix16_En14
              coefIn => CoefOut_1,  -- sfix16_En16 [16]
              dinRegVld => dinReg2Vld,
              syncReset => syncReset,
              dout_2_re => filterOut_re_tmp(1)  -- sfix33_En30
              );

  u_CoefTable_3 : QPSK_src_FilterCoef_block1
    PORT MAP( CoefOut => CoefOut_2  -- sfix16_En16 [16]
              );

  u_subFilter_3_re : QPSK_src_subFilter_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dinReg2_2_re => std_logic_vector(dinReg2_2_re),  -- sfix16_En14
              coefIn => CoefOut_2,  -- sfix16_En16 [16]
              dinRegVld => dinReg2Vld,
              syncReset => syncReset,
              dout_3_re => filterOut_re_tmp(2)  -- sfix33_En30
              );

  u_CoefTable_4 : QPSK_src_FilterCoef_block2
    PORT MAP( CoefOut => CoefOut_3  -- sfix16_En16 [16]
              );

  u_subFilter_4_re : QPSK_src_subFilter_block2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dinReg2_3_re => std_logic_vector(dinReg2_3_re),  -- sfix16_En14
              coefIn => CoefOut_3,  -- sfix16_En16 [16]
              dinRegVld => dinReg2Vld,
              syncReset => syncReset,
              dout_4_re => filterOut_re_tmp(3),  -- sfix33_En30
              doutVld => doutVld
              );

  u_subFilter_1_im : QPSK_src_subFilter
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dinReg2_0_re => std_logic_vector(dinReg2_0_im),  -- sfix16_En14
              coefIn => CoefOut,  -- sfix16_En16 [16]
              dinRegVld => dinReg2Vld,
              syncReset => syncReset,
              dout_1_re => filterOut_im_tmp(0)  -- sfix33_En30
              );

  u_subFilter_2_im : QPSK_src_subFilter_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dinReg2_1_re => std_logic_vector(dinReg2_1_im),  -- sfix16_En14
              coefIn => CoefOut_1,  -- sfix16_En16 [16]
              dinRegVld => dinReg2Vld,
              syncReset => syncReset,
              dout_2_re => filterOut_im_tmp(1)  -- sfix33_En30
              );

  u_subFilter_3_im : QPSK_src_subFilter_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dinReg2_2_re => std_logic_vector(dinReg2_2_im),  -- sfix16_En14
              coefIn => CoefOut_2,  -- sfix16_En16 [16]
              dinRegVld => dinReg2Vld,
              syncReset => syncReset,
              dout_3_re => filterOut_im_tmp(2)  -- sfix33_En30
              );

  u_subFilter_4_im : QPSK_src_subFilter_block2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dinReg2_3_re => std_logic_vector(dinReg2_3_im),  -- sfix16_En14
              coefIn => CoefOut_3,  -- sfix16_En16 [16]
              dinRegVld => dinReg2Vld,
              syncReset => syncReset,
              dout_4_re => filterOut_im_tmp(3),  -- sfix33_En30
              doutVld => doutVlddeadOut
              );

  syncReset <= '0';

  intdelay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dinRegVld <= '0';
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          dinRegVld <= '0';
        ELSE 
          dinRegVld <= validIn;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  filterIn_0_re <= signed(filterIn_re(0));

  intdelay_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dinReg_0_re <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          dinReg_0_re <= to_signed(16#0000#, 16);
        ELSIF validIn = '1' THEN
          dinReg_0_re <= filterIn_0_re;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dinReg2_0_re <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          dinReg2_0_re <= to_signed(16#0000#, 16);
        ELSIF dinRegVld = '1' THEN
          dinReg2_0_re <= dinReg_0_re;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dinReg2Vld <= '0';
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          dinReg2Vld <= '0';
        ELSE 
          dinReg2Vld <= dinRegVld;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  filterIn_1_re <= signed(filterIn_re(1));

  intdelay_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dinReg_1_re <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          dinReg_1_re <= to_signed(16#0000#, 16);
        ELSIF validIn = '1' THEN
          dinReg_1_re <= filterIn_1_re;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;


  intdelay_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dinReg2_1_re <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          dinReg2_1_re <= to_signed(16#0000#, 16);
        ELSIF dinRegVld = '1' THEN
          dinReg2_1_re <= dinReg_1_re;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  filterIn_2_re <= signed(filterIn_re(2));

  intdelay_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dinReg_2_re <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          dinReg_2_re <= to_signed(16#0000#, 16);
        ELSIF validIn = '1' THEN
          dinReg_2_re <= filterIn_2_re;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;


  intdelay_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dinReg2_2_re <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          dinReg2_2_re <= to_signed(16#0000#, 16);
        ELSIF dinRegVld = '1' THEN
          dinReg2_2_re <= dinReg_2_re;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;


  filterIn_3_re <= signed(filterIn_re(3));

  intdelay_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dinReg_3_re <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          dinReg_3_re <= to_signed(16#0000#, 16);
        ELSIF validIn = '1' THEN
          dinReg_3_re <= filterIn_3_re;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_8_process;


  intdelay_9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dinReg2_3_re <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          dinReg2_3_re <= to_signed(16#0000#, 16);
        ELSIF dinRegVld = '1' THEN
          dinReg2_3_re <= dinReg_3_re;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_9_process;



  filterIn_0_im <= signed(filterIn_im(0));

  intdelay_10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dinReg_0_im <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          dinReg_0_im <= to_signed(16#0000#, 16);
        ELSIF validIn = '1' THEN
          dinReg_0_im <= filterIn_0_im;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_10_process;


  intdelay_11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dinReg2_0_im <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          dinReg2_0_im <= to_signed(16#0000#, 16);
        ELSIF dinRegVld = '1' THEN
          dinReg2_0_im <= dinReg_0_im;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_11_process;


  filterIn_1_im <= signed(filterIn_im(1));

  intdelay_12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dinReg_1_im <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          dinReg_1_im <= to_signed(16#0000#, 16);
        ELSIF validIn = '1' THEN
          dinReg_1_im <= filterIn_1_im;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_12_process;


  intdelay_13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dinReg2_1_im <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          dinReg2_1_im <= to_signed(16#0000#, 16);
        ELSIF dinRegVld = '1' THEN
          dinReg2_1_im <= dinReg_1_im;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_13_process;


  filterIn_2_im <= signed(filterIn_im(2));

  intdelay_14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dinReg_2_im <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          dinReg_2_im <= to_signed(16#0000#, 16);
        ELSIF validIn = '1' THEN
          dinReg_2_im <= filterIn_2_im;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_14_process;


  intdelay_15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dinReg2_2_im <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          dinReg2_2_im <= to_signed(16#0000#, 16);
        ELSIF dinRegVld = '1' THEN
          dinReg2_2_im <= dinReg_2_im;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_15_process;


  filterIn_3_im <= signed(filterIn_im(3));

  intdelay_16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dinReg_3_im <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          dinReg_3_im <= to_signed(16#0000#, 16);
        ELSIF validIn = '1' THEN
          dinReg_3_im <= filterIn_3_im;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_16_process;


  intdelay_17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dinReg2_3_im <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          dinReg2_3_im <= to_signed(16#0000#, 16);
        ELSIF dinRegVld = '1' THEN
          dinReg2_3_im <= dinReg_3_im;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_17_process;



  filterOut_re <= filterOut_re_tmp;

  filterOut_im <= filterOut_im_tmp;

  filterOut_vld <= doutVld;

END rtl;

