-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_src_Automatic_Gain_Control.vhd
-- Created: 2025-09-17 13:27:52
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_src_Automatic_Gain_Control
-- Source Path: hdlcoder_QPSKTxRx_RFSoC/QPSK/QPSK Rx/Digital AGC/Automatic Gain Control
-- Hierarchy Level: 3
-- Model version: 9.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.QPSK_src_QPSK_pkg.ALL;

ENTITY QPSK_src_Automatic_Gain_Control IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        validIn                           :   IN    std_logic;
        overThreshold                     :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        validOut                          :   OUT   std_logic
        );
END QPSK_src_Automatic_Gain_Control;


ARCHITECTURE rtl OF QPSK_src_Automatic_Gain_Control IS

  -- Component Declarations
  COMPONENT QPSK_src_Compute_Error
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          error_rsvd                      :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En12
          );
  END COMPONENT;

  COMPONENT QPSK_src_Loop_Filter
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          error_rsvd                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En12
          enable                          :   IN    std_logic;
          gain                            :   OUT   std_logic_vector(24 DOWNTO 0)  -- sfix25_En17
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : QPSK_src_Compute_Error
    USE ENTITY work.QPSK_src_Compute_Error(rtl);

  FOR ALL : QPSK_src_Loop_Filter
    USE ENTITY work.QPSK_src_Loop_Filter(rtl);

  -- Signals
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_reg_re                    : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay1_reg_im                    : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay1_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay2_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Delay10_reg                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL agcUpdate                        : std_logic;
  SIGNAL Data_Type_Conversion_out1_im     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Data_Type_Conversion_out1_re     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Compute_Error_error              : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Loop_Filter_gain                 : std_logic_vector(24 DOWNTO 0);  -- ufix25
  SIGNAL Loop_Filter_gain_signed          : signed(24 DOWNTO 0);  -- sfix25_En17
  SIGNAL Delay8_reg                       : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL agcGain                          : signed(24 DOWNTO 0);  -- sfix25_En17
  SIGNAL Product_out1_re                  : signed(40 DOWNTO 0);  -- sfix41_En31
  SIGNAL Product_out1_im                  : signed(40 DOWNTO 0);  -- sfix41_En31
  SIGNAL Delay6_reg_re                    : vector_of_signed41(0 TO 1);  -- sfix41_En31 [2]
  SIGNAL Delay6_reg_im                    : vector_of_signed41(0 TO 1);  -- sfix41_En31 [2]
  SIGNAL Delay6_out1_re                   : signed(40 DOWNTO 0);  -- sfix41_En31
  SIGNAL Delay6_out1_im                   : signed(40 DOWNTO 0);  -- sfix41_En31
  SIGNAL Delay4_reg_re                    : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay4_reg_im                    : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay4_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay4_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay3_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Delay7_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL Delay5_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay5_out1                      : std_logic;

BEGIN
  u_Compute_Error : QPSK_src_Compute_Error
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn_re => std_logic_vector(Data_Type_Conversion_out1_re),  -- sfix16_En14
              dataIn_im => std_logic_vector(Data_Type_Conversion_out1_im),  -- sfix16_En14
              error_rsvd => Compute_Error_error  -- sfix18_En12
              );

  u_Loop_Filter : QPSK_src_Loop_Filter
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              error_rsvd => Compute_Error_error,  -- sfix18_En12
              enable => agcUpdate,
              gain => Loop_Filter_gain  -- sfix25_En17
              );

  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_reg_re <= (OTHERS => to_signed(16#0000#, 16));
        Delay1_reg_im <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        Delay1_reg_im(0) <= dataIn_im_signed;
        Delay1_reg_im(1) <= Delay1_reg_im(0);
        Delay1_reg_re(0) <= dataIn_re_signed;
        Delay1_reg_re(1) <= Delay1_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1_re <= Delay1_reg_re(1);
  Delay1_out1_im <= Delay1_reg_im(1);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay2_reg(0) <= overThreshold;
        Delay2_reg(1) <= Delay2_reg(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(1);

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay10_reg(0) <= Delay2_out1;
        Delay10_reg(1) <= Delay10_reg(0);
      END IF;
    END IF;
  END PROCESS Delay10_process;

  agcUpdate <= Delay10_reg(1);

  Loop_Filter_gain_signed <= signed(Loop_Filter_gain);

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_reg <= (OTHERS => to_signed(16#0000000#, 25));
      ELSIF enb = '1' THEN
        Delay8_reg(0) <= Loop_Filter_gain_signed;
        Delay8_reg(1) <= Delay8_reg(0);
      END IF;
    END IF;
  END PROCESS Delay8_process;

  agcGain <= Delay8_reg(1);

  Product_out1_re <= Delay1_out1_re * agcGain;
  Product_out1_im <= Delay1_out1_im * agcGain;

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_reg_re <= (OTHERS => to_signed(0, 41));
        Delay6_reg_im <= (OTHERS => to_signed(0, 41));
      ELSIF enb = '1' THEN
        Delay6_reg_im(0) <= Product_out1_im;
        Delay6_reg_im(1) <= Delay6_reg_im(0);
        Delay6_reg_re(0) <= Product_out1_re;
        Delay6_reg_re(1) <= Delay6_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay6_process;

  Delay6_out1_re <= Delay6_reg_re(1);
  Delay6_out1_im <= Delay6_reg_im(1);

  
  Data_Type_Conversion_out1_re <= X"7FFF" WHEN ((Delay6_out1_re(40) = '0') AND (Delay6_out1_re(39 DOWNTO 32) /= "00000000")) OR ((Delay6_out1_re(40) = '0') AND (Delay6_out1_re(32 DOWNTO 17) = X"7FFF")) ELSE
      X"8000" WHEN (Delay6_out1_re(40) = '1') AND (Delay6_out1_re(39 DOWNTO 32) /= "11111111") ELSE
      Delay6_out1_re(32 DOWNTO 17) + ('0' & Delay6_out1_re(16));
  
  Data_Type_Conversion_out1_im <= X"7FFF" WHEN ((Delay6_out1_im(40) = '0') AND (Delay6_out1_im(39 DOWNTO 32) /= "00000000")) OR ((Delay6_out1_im(40) = '0') AND (Delay6_out1_im(32 DOWNTO 17) = X"7FFF")) ELSE
      X"8000" WHEN (Delay6_out1_im(40) = '1') AND (Delay6_out1_im(39 DOWNTO 32) /= "11111111") ELSE
      Delay6_out1_im(32 DOWNTO 17) + ('0' & Delay6_out1_im(16));

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_reg_re <= (OTHERS => to_signed(16#0000#, 16));
        Delay4_reg_im <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        Delay4_reg_im(0) <= Data_Type_Conversion_out1_im;
        Delay4_reg_im(1) <= Delay4_reg_im(0);
        Delay4_reg_re(0) <= Data_Type_Conversion_out1_re;
        Delay4_reg_re(1) <= Delay4_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1_re <= Delay4_reg_re(1);
  Delay4_out1_im <= Delay4_reg_im(1);

  dataOut_re <= std_logic_vector(Delay4_out1_re);

  dataOut_im <= std_logic_vector(Delay4_out1_im);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay3_reg(0) <= validIn;
        Delay3_reg(1) <= Delay3_reg(0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(1);

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay7_reg(0) <= Delay3_out1;
        Delay7_reg(1) <= Delay7_reg(0);
      END IF;
    END IF;
  END PROCESS Delay7_process;

  Delay7_out1 <= Delay7_reg(1);

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay5_reg(0) <= Delay7_out1;
        Delay5_reg(1) <= Delay5_reg(0);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1 <= Delay5_reg(1);

  validOut <= Delay5_out1;

END rtl;

