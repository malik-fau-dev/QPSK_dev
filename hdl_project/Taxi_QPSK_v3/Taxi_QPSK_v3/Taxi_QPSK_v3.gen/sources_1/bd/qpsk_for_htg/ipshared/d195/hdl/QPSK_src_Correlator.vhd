-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_src_Correlator.vhd
-- Created: 2025-09-17 13:27:52
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_src_Correlator
-- Source Path: hdlcoder_QPSKTxRx_RFSoC/QPSK/QPSK Rx/Frequency and Time Synchronizer/Preamble Detector/Correlator
-- Hierarchy Level: 4
-- Model version: 9.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.QPSK_src_QPSK_pkg.ALL;

ENTITY QPSK_src_Correlator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_4_0                         :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        validIn                           :   IN    std_logic;
        dataOut                           :   OUT   std_logic_vector(32 DOWNTO 0);  -- sfix33_En26
        thresholdExceeded                 :   OUT   std_logic;
        validOut                          :   OUT   std_logic
        );
END QPSK_src_Correlator;


ARCHITECTURE rtl OF QPSK_src_Correlator IS

  -- Component Declarations
  COMPONENT QPSK_src_Discrete_FIR_Filter
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT QPSK_src_Magnitude_Squared_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          In1_re                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
          In1_im                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
          Out1                            :   OUT   std_logic_vector(32 DOWNTO 0)  -- sfix33_En26
          );
  END COMPONENT;

  COMPONENT QPSK_src_Magnitude_Squared_and_Moving_Sum
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          scaled1_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          scaled1_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validIn                         :   IN    std_logic;
          E1                              :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  COMPONENT QPSK_src_ThresholdLimiter
    PORT( x                               :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          y                               :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : QPSK_src_Discrete_FIR_Filter
    USE ENTITY work.QPSK_src_Discrete_FIR_Filter(rtl);

  FOR ALL : QPSK_src_Magnitude_Squared_block
    USE ENTITY work.QPSK_src_Magnitude_Squared_block(rtl);

  FOR ALL : QPSK_src_Magnitude_Squared_and_Moving_Sum
    USE ENTITY work.QPSK_src_Magnitude_Squared_and_Moving_Sum(rtl);

  FOR ALL : QPSK_src_ThresholdLimiter
    USE ENTITY work.QPSK_src_ThresholdLimiter(rtl);

  -- Signals
  SIGNAL corrValidIn                      : std_logic;
  SIGNAL Discrete_FIR_Filter_out1_re      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Discrete_FIR_Filter_out1_im      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Discrete_FIR_Filter_out2         : std_logic;
  SIGNAL Discrete_FIR_Filter_out1_re_signed : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Discrete_FIR_Filter_out1_im_signed : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Delay6_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Delay6_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Magnitude_Squared_Out1           : std_logic_vector(32 DOWNTO 0);  -- ufix33
  SIGNAL Magnitude_Squared_Out1_signed    : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL Delay2_out1                      : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay7_reg                       : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL Magnitude_Squared_and_Moving_Sum_E1 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Magnitude_Squared_and_Moving_Sum_E1_signed : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay4_out1                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL y                                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_signed                         : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay8_reg                       : vector_of_signed32(0 TO 2);  -- sfix32 [3]
  SIGNAL Delay8_out1                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Relational_Operator_cast         : signed(34 DOWNTO 0);  -- sfix35_En28
  SIGNAL Relational_Operator_cast_1       : signed(34 DOWNTO 0);  -- sfix35_En28
  SIGNAL Relational_Operator_out1         : std_logic;
  SIGNAL AND_out1                         : std_logic;
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14

BEGIN
  u_Discrete_FIR_Filter : QPSK_src_Discrete_FIR_Filter
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              dataIn_re => dataIn_re,  -- sfix16_En14
              dataIn_im => dataIn_im,  -- sfix16_En14
              validIn => corrValidIn,
              dataOut_re => Discrete_FIR_Filter_out1_re,  -- sfix16_En13
              dataOut_im => Discrete_FIR_Filter_out1_im,  -- sfix16_En13
              validOut => Discrete_FIR_Filter_out2
              );

  u_Magnitude_Squared : QPSK_src_Magnitude_Squared_block
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              In1_re => std_logic_vector(Delay6_out1_re),  -- sfix16_En13
              In1_im => std_logic_vector(Delay6_out1_im),  -- sfix16_En13
              Out1 => Magnitude_Squared_Out1  -- sfix33_En26
              );

  u_Magnitude_Squared_and_Moving_Sum : QPSK_src_Magnitude_Squared_and_Moving_Sum
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              scaled1_re => dataIn_re,  -- sfix16_En14
              scaled1_im => dataIn_im,  -- sfix16_En14
              validIn => corrValidIn,
              E1 => Magnitude_Squared_and_Moving_Sum_E1  -- sfix32_En28
              );

  u_ThresholdLimiter : QPSK_src_ThresholdLimiter
    PORT MAP( x => std_logic_vector(Delay4_out1),  -- sfix32_En28
              y => y  -- sfix32_En28
              );

  corrValidIn <= validIn;

  Discrete_FIR_Filter_out1_re_signed <= signed(Discrete_FIR_Filter_out1_re);

  Discrete_FIR_Filter_out1_im_signed <= signed(Discrete_FIR_Filter_out1_im);

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1_re <= to_signed(16#0000#, 16);
        Delay6_out1_im <= to_signed(16#0000#, 16);
      ELSIF enb_1_4_0 = '1' THEN
        Delay6_out1_re <= Discrete_FIR_Filter_out1_re_signed;
        Delay6_out1_im <= Discrete_FIR_Filter_out1_im_signed;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  Magnitude_Squared_Out1_signed <= signed(Magnitude_Squared_Out1);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_signed(0, 33);
      ELSIF enb_1_4_0 = '1' THEN
        Delay2_out1 <= Magnitude_Squared_Out1_signed;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  dataOut <= std_logic_vector(Delay2_out1);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb_1_4_0 = '1' THEN
        Delay1_out1 <= Discrete_FIR_Filter_out2;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_reg <= (OTHERS => '0');
      ELSIF enb_1_4_0 = '1' THEN
        Delay7_reg(0) <= Delay1_out1;
        Delay7_reg(2 DOWNTO 1) <= Delay7_reg(1 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay7_process;

  Delay7_out1 <= Delay7_reg(2);

  Magnitude_Squared_and_Moving_Sum_E1_signed <= signed(Magnitude_Squared_and_Moving_Sum_E1);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= to_signed(0, 32);
      ELSIF enb_1_4_0 = '1' THEN
        Delay4_out1 <= Magnitude_Squared_and_Moving_Sum_E1_signed;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  y_signed <= signed(y);

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb_1_4_0 = '1' THEN
        Delay8_reg(0) <= y_signed;
        Delay8_reg(1 TO 2) <= Delay8_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS Delay8_process;

  Delay8_out1 <= Delay8_reg(2);

  Relational_Operator_cast <= Magnitude_Squared_Out1_signed & '0' & '0';
  Relational_Operator_cast_1 <= resize(Delay8_out1, 35);
  
  Relational_Operator_out1 <= '1' WHEN Relational_Operator_cast > Relational_Operator_cast_1 ELSE
      '0';

  AND_out1 <= Delay7_out1 AND Relational_Operator_out1;

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= '0';
      ELSIF enb_1_4_0 = '1' THEN
        Delay5_out1 <= AND_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb_1_4_0 = '1' THEN
        Delay3_out1 <= Delay7_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;



  thresholdExceeded <= Delay5_out1;

  validOut <= Delay3_out1;

END rtl;

