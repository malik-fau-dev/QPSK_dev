-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_src_Addressable_Delay_Line_block1.vhd
-- Created: 2025-09-17 13:27:52
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_src_Addressable_Delay_Line_block1
-- Source Path: hdlcoder_QPSKTxRx_RFSoC/QPSK/QPSK Tx/RRC Transmit Filter/FIR Interpolator/FIRFilter1/Addressable_Delay_Line
-- Hierarchy Level: 5
-- Model version: 9.4
-- 
-- Addressable Delay Line
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY QPSK_src_Addressable_Delay_Line_block1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn                            :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En16
        wrEn                              :   IN    std_logic;
        wrAddr                            :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        rdAddr                            :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        delayLineEnd                      :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En16
        dataOut                           :   OUT   std_logic_vector(16 DOWNTO 0)  -- sfix17_En16
        );
END QPSK_src_Addressable_Delay_Line_block1;


ARCHITECTURE rtl OF QPSK_src_Addressable_Delay_Line_block1 IS

  -- Component Declarations
  COMPONENT QPSK_src_SimpleDualPortRAM_generic_block
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : QPSK_src_SimpleDualPortRAM_generic_block
    USE ENTITY work.QPSK_src_SimpleDualPortRAM_generic_block(rtl);

  -- Signals
  SIGNAL wrAddr_unsigned                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rdAddr_unsigned                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL saveLast                         : std_logic;
  SIGNAL dataEndEn                        : std_logic;
  SIGNAL wrEnN                            : std_logic;
  SIGNAL dataEndEnS                       : std_logic;
  SIGNAL delayedSignals                   : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL delayedSignals_signed            : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL delayLineEnd_tmp                 : signed(16 DOWNTO 0);  -- sfix17_En16

BEGIN
  u_simpleDualPortRam : QPSK_src_SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 2,
                 DataWidth => 17
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => dataIn,
              wr_addr => wrAddr,
              wr_en => wrEn,
              rd_addr => rdAddr,
              dout => delayedSignals
              );

  wrAddr_unsigned <= unsigned(wrAddr);

  rdAddr_unsigned <= unsigned(rdAddr);

  
  saveLast <= '1' WHEN wrAddr_unsigned = rdAddr_unsigned ELSE
      '0';

  dataOutReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dataEndEn <= '0';
      ELSIF enb = '1' THEN
        dataEndEn <= saveLast;
      END IF;
    END IF;
  END PROCESS dataOutReg_process;


  wrEnN <=  NOT dataEndEn;

  dataEndEnS <= saveLast AND wrEnN;

  delayedSignals_signed <= signed(delayedSignals);

  dataOutReg_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayLineEnd_tmp <= to_signed(16#00000#, 17);
      ELSIF enb = '1' AND dataEndEnS = '1' THEN
        delayLineEnd_tmp <= delayedSignals_signed;
      END IF;
    END IF;
  END PROCESS dataOutReg_1_process;


  delayLineEnd <= std_logic_vector(delayLineEnd_tmp);

  dataOut <= delayedSignals;

END rtl;

