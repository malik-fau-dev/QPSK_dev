-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_src_Digital_AGC.vhd
-- Created: 2025-09-17 13:27:52
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_src_Digital_AGC
-- Source Path: hdlcoder_QPSKTxRx_RFSoC/QPSK/QPSK Rx/Digital AGC
-- Hierarchy Level: 2
-- Model version: 9.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY QPSK_src_Digital_AGC IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        validIn                           :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        validOut                          :   OUT   std_logic
        );
END QPSK_src_Digital_AGC;


ARCHITECTURE rtl OF QPSK_src_Digital_AGC IS

  -- Component Declarations
  COMPONENT QPSK_src_Power_Threshold
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validOut                        :   OUT   std_logic;
          overThreshold                   :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT QPSK_src_Automatic_Gain_Control
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validIn                         :   IN    std_logic;
          overThreshold                   :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : QPSK_src_Power_Threshold
    USE ENTITY work.QPSK_src_Power_Threshold(rtl);

  FOR ALL : QPSK_src_Automatic_Gain_Control
    USE ENTITY work.QPSK_src_Automatic_Gain_Control(rtl);

  -- Signals
  SIGNAL Power_Threshold_dataOut_re       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Power_Threshold_dataOut_im       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Power_Threshold_validOut         : std_logic;
  SIGNAL Power_Threshold_overThreshold    : std_logic;
  SIGNAL Automatic_Gain_Control_dataOut_re : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Automatic_Gain_Control_dataOut_im : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Automatic_Gain_Control_validOut  : std_logic;

BEGIN
  u_Power_Threshold : QPSK_src_Power_Threshold
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn_re => dataIn_re,  -- sfix16_En14
              dataIn_im => dataIn_im,  -- sfix16_En14
              validIn => validIn,
              dataOut_re => Power_Threshold_dataOut_re,  -- sfix16_En14
              dataOut_im => Power_Threshold_dataOut_im,  -- sfix16_En14
              validOut => Power_Threshold_validOut,
              overThreshold => Power_Threshold_overThreshold
              );

  u_Automatic_Gain_Control : QPSK_src_Automatic_Gain_Control
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn_re => Power_Threshold_dataOut_re,  -- sfix16_En14
              dataIn_im => Power_Threshold_dataOut_im,  -- sfix16_En14
              validIn => Power_Threshold_validOut,
              overThreshold => Power_Threshold_overThreshold,
              dataOut_re => Automatic_Gain_Control_dataOut_re,  -- sfix16_En14
              dataOut_im => Automatic_Gain_Control_dataOut_im,  -- sfix16_En14
              validOut => Automatic_Gain_Control_validOut
              );

  dataOut_re <= Automatic_Gain_Control_dataOut_re;

  dataOut_im <= Automatic_Gain_Control_dataOut_im;

  validOut <= Automatic_Gain_Control_validOut;

END rtl;

