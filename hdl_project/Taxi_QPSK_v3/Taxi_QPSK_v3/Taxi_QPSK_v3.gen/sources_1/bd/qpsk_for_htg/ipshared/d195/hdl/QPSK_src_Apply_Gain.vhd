-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_src_Apply_Gain.vhd
-- Created: 2025-09-17 13:27:52
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_src_Apply_Gain
-- Source Path: hdlcoder_QPSKTxRx_RFSoC/QPSK/From ADC/Apply Gain
-- Hierarchy Level: 2
-- Model version: 9.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.QPSK_src_QPSK_pkg.ALL;

ENTITY QPSK_src_Apply_Gain IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        validIn                           :   IN    std_logic;
        rx_input_gain                     :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        validOut                          :   OUT   std_logic
        );
END QPSK_src_Apply_Gain;


ARCHITECTURE rtl OF QPSK_src_Apply_Gain IS

  -- Signals
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL rx_input_gain_signed             : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay_out1                       : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product_out1_re                  : signed(33 DOWNTO 0);  -- sfix34_En29
  SIGNAL Product_out1_im                  : signed(33 DOWNTO 0);  -- sfix34_En29
  SIGNAL Delay2_reg_re                    : vector_of_signed34(0 TO 1);  -- sfix34_En29 [2]
  SIGNAL Delay2_reg_im                    : vector_of_signed34(0 TO 1);  -- sfix34_En29 [2]
  SIGNAL Delay2_out1_re                   : signed(33 DOWNTO 0);  -- sfix34_En29
  SIGNAL Delay2_out1_im                   : signed(33 DOWNTO 0);  -- sfix34_En29
  SIGNAL Data_Type_Conversion_out1_re     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Data_Type_Conversion_out1_im     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay5_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay5_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Delay3_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Delay6_out1                      : std_logic;

BEGIN
  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_re <= to_signed(16#0000#, 16);
        Delay1_out1_im <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay1_out1_re <= dataIn_re_signed;
        Delay1_out1_im <= dataIn_im_signed;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  rx_input_gain_signed <= signed(rx_input_gain);

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay_out1 <= rx_input_gain_signed;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Product_out1_re <= Delay1_out1_re * Delay_out1;
  Product_out1_im <= Delay1_out1_im * Delay_out1;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_reg_re <= (OTHERS => to_signed(0, 34));
        Delay2_reg_im <= (OTHERS => to_signed(0, 34));
      ELSIF enb = '1' THEN
        Delay2_reg_im(0) <= Product_out1_im;
        Delay2_reg_im(1) <= Delay2_reg_im(0);
        Delay2_reg_re(0) <= Product_out1_re;
        Delay2_reg_re(1) <= Delay2_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1_re <= Delay2_reg_re(1);
  Delay2_out1_im <= Delay2_reg_im(1);

  
  Data_Type_Conversion_out1_re <= X"7FFF" WHEN (Delay2_out1_re(33) = '0') AND (Delay2_out1_re(32 DOWNTO 30) /= "000") ELSE
      X"8000" WHEN (Delay2_out1_re(33) = '1') AND (Delay2_out1_re(32 DOWNTO 30) /= "111") ELSE
      Delay2_out1_re(30 DOWNTO 15);
  
  Data_Type_Conversion_out1_im <= X"7FFF" WHEN (Delay2_out1_im(33) = '0') AND (Delay2_out1_im(32 DOWNTO 30) /= "000") ELSE
      X"8000" WHEN (Delay2_out1_im(33) = '1') AND (Delay2_out1_im(32 DOWNTO 30) /= "111") ELSE
      Delay2_out1_im(30 DOWNTO 15);

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1_re <= to_signed(16#0000#, 16);
        Delay5_out1_im <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay5_out1_re <= Data_Type_Conversion_out1_re;
        Delay5_out1_im <= Data_Type_Conversion_out1_im;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  dataOut_re <= std_logic_vector(Delay5_out1_re);

  dataOut_im <= std_logic_vector(Delay5_out1_im);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay4_out1 <= validIn;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay3_reg(0) <= Delay4_out1;
        Delay3_reg(1) <= Delay3_reg(0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(1);

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay6_out1 <= Delay3_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  validOut <= Delay6_out1;

END rtl;

