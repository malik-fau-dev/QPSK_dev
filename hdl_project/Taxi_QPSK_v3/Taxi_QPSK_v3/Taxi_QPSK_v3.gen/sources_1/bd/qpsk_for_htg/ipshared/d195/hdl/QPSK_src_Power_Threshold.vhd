-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_src_Power_Threshold.vhd
-- Created: 2025-09-17 13:27:52
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_src_Power_Threshold
-- Source Path: hdlcoder_QPSKTxRx_RFSoC/QPSK/QPSK Rx/Digital AGC/Power Threshold
-- Hierarchy Level: 3
-- Model version: 9.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.QPSK_src_QPSK_pkg.ALL;

ENTITY QPSK_src_Power_Threshold IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        validIn                           :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        validOut                          :   OUT   std_logic;
        overThreshold                     :   OUT   std_logic
        );
END QPSK_src_Power_Threshold;


ARCHITECTURE rtl OF QPSK_src_Power_Threshold IS

  -- Component Declarations
  COMPONENT QPSK_src_Compute_Power
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1_re                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          In1_im                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          Out1                            :   OUT   std_logic_vector(32 DOWNTO 0)  -- sfix33_En28
          );
  END COMPONENT;

  COMPONENT QPSK_src_Moving_Average
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En28
          Out1                            :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : QPSK_src_Compute_Power
    USE ENTITY work.QPSK_src_Compute_Power(rtl);

  FOR ALL : QPSK_src_Moving_Average
    USE ENTITY work.QPSK_src_Moving_Average(rtl);

  -- Signals
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_reg_re                    : vector_of_signed16(0 TO 2);  -- sfix16_En14 [3]
  SIGNAL Delay1_reg_im                    : vector_of_signed16(0 TO 2);  -- sfix16_En14 [3]
  SIGNAL Delay1_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay2_reg_re                    : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL Delay2_reg_im                    : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL Delay2_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay2_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay3_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay3_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay4_reg                       : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Delay_reg                        : std_logic_vector(63 DOWNTO 0);  -- ufix1 [64]
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL Compute_Power_Out1               : std_logic_vector(32 DOWNTO 0);  -- ufix33
  SIGNAL Moving_Average_Out1              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Moving_Average_Out1_signed       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Delay5_out1                      : std_logic;

BEGIN
  u_Compute_Power : QPSK_src_Compute_Power
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              In1_re => dataIn_re,  -- sfix16_En14
              In1_im => dataIn_im,  -- sfix16_En14
              Out1 => Compute_Power_Out1  -- sfix33_En28
              );

  u_Moving_Average : QPSK_src_Moving_Average
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              In1 => Compute_Power_Out1,  -- sfix33_En28
              Out1 => Moving_Average_Out1  -- sfix16_En14
              );

  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_reg_re <= (OTHERS => to_signed(16#0000#, 16));
        Delay1_reg_im <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        Delay1_reg_im(0) <= dataIn_im_signed;
        Delay1_reg_im(1 TO 2) <= Delay1_reg_im(0 TO 1);
        Delay1_reg_re(0) <= dataIn_re_signed;
        Delay1_reg_re(1 TO 2) <= Delay1_reg_re(0 TO 1);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1_re <= Delay1_reg_re(2);
  Delay1_out1_im <= Delay1_reg_im(2);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_reg_re <= (OTHERS => to_signed(16#0000#, 16));
        Delay2_reg_im <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        Delay2_reg_im(0) <= Delay1_out1_im;
        Delay2_reg_im(1 TO 63) <= Delay2_reg_im(0 TO 62);
        Delay2_reg_re(0) <= Delay1_out1_re;
        Delay2_reg_re(1 TO 63) <= Delay2_reg_re(0 TO 62);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1_re <= Delay2_reg_re(63);
  Delay2_out1_im <= Delay2_reg_im(63);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1_re <= to_signed(16#0000#, 16);
        Delay3_out1_im <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay3_out1_re <= Delay2_out1_re;
        Delay3_out1_im <= Delay2_out1_im;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  dataOut_re <= std_logic_vector(Delay3_out1_re);

  dataOut_im <= std_logic_vector(Delay3_out1_im);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay4_reg(0) <= validIn;
        Delay4_reg(2 DOWNTO 1) <= Delay4_reg(1 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1 <= Delay4_reg(2);

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay_reg(0) <= Delay4_out1;
        Delay_reg(63 DOWNTO 1) <= Delay_reg(62 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1 <= Delay_reg(63);

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay6_out1 <= Delay_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  Moving_Average_Out1_signed <= signed(Moving_Average_Out1);

  
  Compare_To_Constant_out1 <= '1' WHEN Moving_Average_Out1_signed > to_signed(16#0001#, 16) ELSE
      '0';

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay5_out1 <= Compare_To_Constant_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  validOut <= Delay6_out1;

  overThreshold <= Delay5_out1;

END rtl;

