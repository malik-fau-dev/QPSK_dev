-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_src_Capture_Source_Mux.vhd
-- Created: 2025-09-17 13:27:53
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_src_Capture_Source_Mux
-- Source Path: hdlcoder_QPSKTxRx_RFSoC/QPSK/To DMA/Capture Source Mux
-- Hierarchy Level: 2
-- Model version: 9.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY QPSK_src_Capture_Source_Mux IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataBus_data                      :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        dataBus_valid                     :   IN    std_logic;
        RxBus_data_re                     :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        RxBus_data_im                     :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        RxBus_valid                       :   IN    std_logic;
        capture_src_sel                   :   IN    std_logic;  -- ufix1
        outBus_data                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        outBus_valid                      :   OUT   std_logic
        );
END QPSK_src_Capture_Source_Mux;


ARCHITECTURE rtl OF QPSK_src_Capture_Source_Mux IS

  -- Component Declarations
  COMPONENT QPSK_src_Data_to_uint32
    PORT( In1_data_re                     :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          In1_data_im                     :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          In1_valid                       :   IN    std_logic;
          Out1_data                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          Out1_valid                      :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : QPSK_src_Data_to_uint32
    USE ENTITY work.QPSK_src_Data_to_uint32(rtl);

  -- Signals
  SIGNAL dataBus_data_unsigned            : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Data_to_uint32_Out1_data         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_to_uint32_Out1_valid        : std_logic;
  SIGNAL Data_to_uint32_Out1_data_unsigned : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL data                             : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL data_1                           : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL valid                            : std_logic;
  SIGNAL valid_1                          : std_logic;

BEGIN
  u_Data_to_uint32 : QPSK_src_Data_to_uint32
    PORT MAP( In1_data_re => RxBus_data_re,  -- sfix16_En14
              In1_data_im => RxBus_data_im,  -- sfix16_En14
              In1_valid => RxBus_valid,
              Out1_data => Data_to_uint32_Out1_data,  -- uint32
              Out1_valid => Data_to_uint32_Out1_valid
              );

  dataBus_data_unsigned <= unsigned(dataBus_data);

  Data_to_uint32_Out1_data_unsigned <= unsigned(Data_to_uint32_Out1_data);

  
  data <= dataBus_data_unsigned WHEN capture_src_sel = '0' ELSE
      Data_to_uint32_Out1_data_unsigned;

  Delay_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        data_1 <= data;
      END IF;
    END IF;
  END PROCESS Delay_1_process;


  outBus_data <= std_logic_vector(data_1);

  
  valid <= dataBus_valid WHEN capture_src_sel = '0' ELSE
      Data_to_uint32_Out1_valid;

  Delay_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        valid_1 <= '0';
      ELSIF enb = '1' THEN
        valid_1 <= valid;
      END IF;
    END IF;
  END PROCESS Delay_2_process;


  outBus_valid <= valid_1;

END rtl;

