-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_src_To_DMA.vhd
-- Created: 2025-09-17 13:27:53
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_src_To_DMA
-- Source Path: hdlcoder_QPSKTxRx_RFSoC/QPSK/To DMA
-- Hierarchy Level: 1
-- Model version: 9.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY QPSK_src_To_DMA IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataBus_data                      :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        dataBus_valid                     :   IN    std_logic;
        RxBus_data_re                     :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        RxBus_data_im                     :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        RxBus_valid                       :   IN    std_logic;
        s2mmReady                         :   IN    std_logic;
        capture_mode                      :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        capture_start                     :   IN    std_logic;
        capture_length                    :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        capture_src_sel                   :   IN    std_logic;  -- ufix1
        s2mmData                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        s2mmValid                         :   OUT   std_logic;
        s2mmLast                          :   OUT   std_logic
        );
END QPSK_src_To_DMA;


ARCHITECTURE rtl OF QPSK_src_To_DMA IS

  -- Component Declarations
  COMPONENT QPSK_src_Capture_Source_Mux
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataBus_data                    :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          dataBus_valid                   :   IN    std_logic;
          RxBus_data_re                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          RxBus_data_im                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          RxBus_valid                     :   IN    std_logic;
          capture_src_sel                 :   IN    std_logic;  -- ufix1
          outBus_data                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          outBus_valid                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT QPSK_src_Triggered_Capture
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enable                          :   IN    std_logic;
          dataBusIn_data                  :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          dataBusIn_valid                 :   IN    std_logic;
          streamOutReady                  :   IN    std_logic;
          capture_start                   :   IN    std_logic;
          capture_length_active           :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          streamOutBus_data               :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          streamOutBus_valid              :   OUT   std_logic;
          streamOutBus_last               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT QPSK_src_Sync_Controller
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          stream_last                     :   IN    std_logic;
          capture_mode                    :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          capture_length                  :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          freerun_enable                  :   OUT   std_logic;
          trigger_enable                  :   OUT   std_logic;
          capture_length_active           :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  COMPONENT QPSK_src_Free_Running_Capture
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enable                          :   IN    std_logic;
          dataBusIn_data                  :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          dataBusIn_valid                 :   IN    std_logic;
          streamReadyOut                  :   IN    std_logic;
          capture_length_active           :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          streamBusOut_data               :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          streamBusOut_valid              :   OUT   std_logic;
          streamBusOut_last               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT QPSK_src_Stream_Out_Switch
    PORT( stream0_data                    :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          stream0_valid                   :   IN    std_logic;
          stream0_last                    :   IN    std_logic;
          stream1_data                    :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          stream1_valid                   :   IN    std_logic;
          stream1_last                    :   IN    std_logic;
          streamOutReady                  :   IN    std_logic;
          streamOutData                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          streamOutValid                  :   OUT   std_logic;
          streamOutLast                   :   OUT   std_logic;
          stream0Ready                    :   OUT   std_logic;
          stream1Ready                    :   OUT   std_logic;
          last                            :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : QPSK_src_Capture_Source_Mux
    USE ENTITY work.QPSK_src_Capture_Source_Mux(rtl);

  FOR ALL : QPSK_src_Triggered_Capture
    USE ENTITY work.QPSK_src_Triggered_Capture(rtl);

  FOR ALL : QPSK_src_Sync_Controller
    USE ENTITY work.QPSK_src_Sync_Controller(rtl);

  FOR ALL : QPSK_src_Free_Running_Capture
    USE ENTITY work.QPSK_src_Free_Running_Capture(rtl);

  FOR ALL : QPSK_src_Stream_Out_Switch
    USE ENTITY work.QPSK_src_Stream_Out_Switch(rtl);

  -- Signals
  SIGNAL Capture_Source_Mux_outBus_data   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Capture_Source_Mux_outBus_valid  : std_logic;
  SIGNAL trigger_enable                   : std_logic;
  SIGNAL Stream_Out_Switch_stream1Ready   : std_logic;
  SIGNAL capture_length_active            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Triggered_Capture_streamOutBus_data : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Triggered_Capture_streamOutBus_valid : std_logic;
  SIGNAL Triggered_Capture_streamOutBus_last : std_logic;
  SIGNAL Stream_Out_Switch_last           : std_logic;
  SIGNAL Sync_Controller_freerun_enable   : std_logic;
  SIGNAL Stream_Out_Switch_stream0Ready   : std_logic;
  SIGNAL Free_Running_Capture_streamBusOut_data : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Free_Running_Capture_streamBusOut_valid : std_logic;
  SIGNAL Free_Running_Capture_streamBusOut_last : std_logic;
  SIGNAL Stream_Out_Switch_streamOutData  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stream_Out_Switch_streamOutValid : std_logic;
  SIGNAL Stream_Out_Switch_streamOutLast  : std_logic;

BEGIN
  u_Capture_Source_Mux : QPSK_src_Capture_Source_Mux
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataBus_data => dataBus_data,  -- uint32
              dataBus_valid => dataBus_valid,
              RxBus_data_re => RxBus_data_re,  -- sfix16_En14
              RxBus_data_im => RxBus_data_im,  -- sfix16_En14
              RxBus_valid => RxBus_valid,
              capture_src_sel => capture_src_sel,  -- ufix1
              outBus_data => Capture_Source_Mux_outBus_data,  -- uint32
              outBus_valid => Capture_Source_Mux_outBus_valid
              );

  u_Triggered_Capture : QPSK_src_Triggered_Capture
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enable => trigger_enable,
              dataBusIn_data => Capture_Source_Mux_outBus_data,  -- uint32
              dataBusIn_valid => Capture_Source_Mux_outBus_valid,
              streamOutReady => Stream_Out_Switch_stream1Ready,
              capture_start => capture_start,
              capture_length_active => capture_length_active,  -- uint32
              streamOutBus_data => Triggered_Capture_streamOutBus_data,  -- uint32
              streamOutBus_valid => Triggered_Capture_streamOutBus_valid,
              streamOutBus_last => Triggered_Capture_streamOutBus_last
              );

  u_Sync_Controller : QPSK_src_Sync_Controller
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              stream_last => Stream_Out_Switch_last,
              capture_mode => capture_mode,  -- ufix2
              capture_length => capture_length,  -- uint32
              freerun_enable => Sync_Controller_freerun_enable,
              trigger_enable => trigger_enable,
              capture_length_active => capture_length_active  -- uint32
              );

  u_Free_Running_Capture : QPSK_src_Free_Running_Capture
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enable => Sync_Controller_freerun_enable,
              dataBusIn_data => Capture_Source_Mux_outBus_data,  -- uint32
              dataBusIn_valid => Capture_Source_Mux_outBus_valid,
              streamReadyOut => Stream_Out_Switch_stream0Ready,
              capture_length_active => capture_length_active,  -- uint32
              streamBusOut_data => Free_Running_Capture_streamBusOut_data,  -- uint32
              streamBusOut_valid => Free_Running_Capture_streamBusOut_valid,
              streamBusOut_last => Free_Running_Capture_streamBusOut_last
              );

  u_Stream_Out_Switch : QPSK_src_Stream_Out_Switch
    PORT MAP( stream0_data => Free_Running_Capture_streamBusOut_data,  -- uint32
              stream0_valid => Free_Running_Capture_streamBusOut_valid,
              stream0_last => Free_Running_Capture_streamBusOut_last,
              stream1_data => Triggered_Capture_streamOutBus_data,  -- uint32
              stream1_valid => Triggered_Capture_streamOutBus_valid,
              stream1_last => Triggered_Capture_streamOutBus_last,
              streamOutReady => s2mmReady,
              streamOutData => Stream_Out_Switch_streamOutData,  -- uint32
              streamOutValid => Stream_Out_Switch_streamOutValid,
              streamOutLast => Stream_Out_Switch_streamOutLast,
              stream0Ready => Stream_Out_Switch_stream0Ready,
              stream1Ready => Stream_Out_Switch_stream1Ready,
              last => Stream_Out_Switch_last
              );

  s2mmData <= Stream_Out_Switch_streamOutData;

  s2mmValid <= Stream_Out_Switch_streamOutValid;

  s2mmLast <= Stream_Out_Switch_streamOutLast;

END rtl;

