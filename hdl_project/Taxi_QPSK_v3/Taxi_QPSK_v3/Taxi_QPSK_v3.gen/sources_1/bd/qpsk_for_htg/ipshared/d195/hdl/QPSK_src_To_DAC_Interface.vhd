-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_src_To_DAC_Interface.vhd
-- Created: 2025-09-17 13:27:53
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_src_To_DAC_Interface
-- Source Path: hdlcoder_QPSKTxRx_RFSoC/QPSK/To DAC/To DAC Interface
-- Hierarchy Level: 2
-- Model version: 9.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.QPSK_src_QPSK_pkg.ALL;

ENTITY QPSK_src_To_DAC_Interface IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En14 [4]
        dataIn_im                         :   IN    vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En14 [4]
        validIn                           :   IN    std_logic;
        tx_enable                         :   IN    std_logic;
        dacDataI                          :   OUT   vector_of_std_logic_vector16(0 TO 3);  -- int16 [4]
        dacDataQ                          :   OUT   vector_of_std_logic_vector16(0 TO 3);  -- int16 [4]
        dacValid                          :   OUT   std_logic
        );
END QPSK_src_To_DAC_Interface;


ARCHITECTURE rtl OF QPSK_src_To_DAC_Interface IS

  -- Component Declarations
  COMPONENT QPSK_src_Zero_On_Invalid_block
    PORT( dataIn_re                       :   IN    vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En14 [4]
          dataIn_im                       :   IN    vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En14 [4]
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En14 [4]
          dataOut_im                      :   OUT   vector_of_std_logic_vector16(0 TO 3)  -- sfix16_En14 [4]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : QPSK_src_Zero_On_Invalid_block
    USE ENTITY work.QPSK_src_Zero_On_Invalid_block(rtl);

  -- Signals
  SIGNAL dataIn_re_signed                 : vector_of_signed16(0 TO 3);  -- sfix16_En14 [4]
  SIGNAL dataIn_im_signed                 : vector_of_signed16(0 TO 3);  -- sfix16_En14 [4]
  SIGNAL Delay_out1_re                    : vector_of_signed16(0 TO 3);  -- sfix16_En14 [4]
  SIGNAL Delay_out1_im                    : vector_of_signed16(0 TO 3);  -- sfix16_En14 [4]
  SIGNAL Delay_out1_re_1                  : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL Delay_out1_im_1                  : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL AND_out1                         : std_logic;
  SIGNAL Zero_On_Invalid_dataOut_re       : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL Zero_On_Invalid_dataOut_im       : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL Zero_On_Invalid_dataOut_re_signed : vector_of_signed16(0 TO 3);  -- sfix16_En14 [4]
  SIGNAL Zero_On_Invalid_dataOut_im_signed : vector_of_signed16(0 TO 3);  -- sfix16_En14 [4]
  SIGNAL Data_Type_Conversion1_out1_re    : vector_of_signed16(0 TO 3);  -- int16 [4]
  SIGNAL Data_Type_Conversion1_out1_im    : vector_of_signed16(0 TO 3);  -- int16 [4]
  SIGNAL Constant_out1                    : std_logic;

BEGIN
  u_Zero_On_Invalid : QPSK_src_Zero_On_Invalid_block
    PORT MAP( dataIn_re => Delay_out1_re_1,  -- sfix16_En14 [4]
              dataIn_im => Delay_out1_im_1,  -- sfix16_En14 [4]
              validIn => AND_out1,
              dataOut_re => Zero_On_Invalid_dataOut_re,  -- sfix16_En14 [4]
              dataOut_im => Zero_On_Invalid_dataOut_im  -- sfix16_En14 [4]
              );

  outputgen7: FOR k IN 0 TO 3 GENERATE
    dataIn_re_signed(k) <= signed(dataIn_re(k));
  END GENERATE;

  outputgen6: FOR k IN 0 TO 3 GENERATE
    dataIn_im_signed(k) <= signed(dataIn_im(k));
  END GENERATE;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1_re <= (OTHERS => to_signed(16#0000#, 16));
        Delay_out1_im <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        Delay_out1_re <= dataIn_re_signed;
        Delay_out1_im <= dataIn_im_signed;
      END IF;
    END IF;
  END PROCESS Delay_process;


  outputgen5: FOR k IN 0 TO 3 GENERATE
    Delay_out1_re_1(k) <= std_logic_vector(Delay_out1_re(k));
  END GENERATE;

  outputgen4: FOR k IN 0 TO 3 GENERATE
    Delay_out1_im_1(k) <= std_logic_vector(Delay_out1_im(k));
  END GENERATE;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1 <= validIn;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  AND_out1 <= Delay1_out1 AND tx_enable;

  outputgen3: FOR k IN 0 TO 3 GENERATE
    Zero_On_Invalid_dataOut_re_signed(k) <= signed(Zero_On_Invalid_dataOut_re(k));
  END GENERATE;

  outputgen2: FOR k IN 0 TO 3 GENERATE
    Zero_On_Invalid_dataOut_im_signed(k) <= signed(Zero_On_Invalid_dataOut_im(k));
  END GENERATE;

  Data_Type_Conversion1_out1_re <= Zero_On_Invalid_dataOut_re_signed;
  Data_Type_Conversion1_out1_im <= Zero_On_Invalid_dataOut_im_signed;

  outputgen1: FOR k IN 0 TO 3 GENERATE
    dacDataI(k) <= std_logic_vector(Data_Type_Conversion1_out1_re(k));
  END GENERATE;

  outputgen: FOR k IN 0 TO 3 GENERATE
    dacDataQ(k) <= std_logic_vector(Data_Type_Conversion1_out1_im(k));
  END GENERATE;

  Constant_out1 <= '1';

  dacValid <= Constant_out1;

END rtl;

