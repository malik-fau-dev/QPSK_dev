-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_src_Triggered_Capture.vhd
-- Created: 2025-09-17 13:27:53
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_src_Triggered_Capture
-- Source Path: hdlcoder_QPSKTxRx_RFSoC/QPSK/To DMA/Triggered Capture
-- Hierarchy Level: 2
-- Model version: 9.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY QPSK_src_Triggered_Capture IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enable                            :   IN    std_logic;
        dataBusIn_data                    :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        dataBusIn_valid                   :   IN    std_logic;
        streamOutReady                    :   IN    std_logic;
        capture_start                     :   IN    std_logic;
        capture_length_active             :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        streamOutBus_data                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        streamOutBus_valid                :   OUT   std_logic;
        streamOutBus_last                 :   OUT   std_logic
        );
END QPSK_src_Triggered_Capture;


ARCHITECTURE rtl OF QPSK_src_Triggered_Capture IS

  -- Component Declarations
  COMPONENT QPSK_src_Detect_Rise_Positive_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT QPSK_src_One_Shot_Capture_Control
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          validIn                         :   IN    std_logic;
          start                           :   IN    std_logic;
          length                          :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          readyOut                        :   IN    std_logic;
          validOut                        :   OUT   std_logic;
          lastOut                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT QPSK_src_Stream_FIFO
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn                          :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          validIn                         :   IN    std_logic;
          lastIn                          :   IN    std_logic;
          readyOut                        :   IN    std_logic;
          dataOut                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          validOut                        :   OUT   std_logic;
          lastOut                         :   OUT   std_logic;
          readyIn                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT QPSK_src_To_Stream_Bus
    PORT( data                            :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          valid                           :   IN    std_logic;
          last                            :   IN    std_logic;
          bus_data                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          bus_valid                       :   OUT   std_logic;
          bus_last                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : QPSK_src_Detect_Rise_Positive_block
    USE ENTITY work.QPSK_src_Detect_Rise_Positive_block(rtl);

  FOR ALL : QPSK_src_One_Shot_Capture_Control
    USE ENTITY work.QPSK_src_One_Shot_Capture_Control(rtl);

  FOR ALL : QPSK_src_Stream_FIFO
    USE ENTITY work.QPSK_src_Stream_FIFO(rtl);

  FOR ALL : QPSK_src_To_Stream_Bus
    USE ENTITY work.QPSK_src_To_Stream_Bus(rtl);

  -- Signals
  SIGNAL data                             : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL data_1                           : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL valid                            : std_logic;
  SIGNAL valid_1                          : std_logic;
  SIGNAL AND1_out1                        : std_logic;
  SIGNAL AND2_out1                        : std_logic;
  SIGNAL captureTrigger                   : std_logic;
  SIGNAL length_out                       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL length_out_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stream_FIFO_readyIn              : std_logic;
  SIGNAL One_Shot_Capture_Control_validOut : std_logic;
  SIGNAL One_Shot_Capture_Control_lastOut : std_logic;
  SIGNAL Stream_FIFO_dataOut              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stream_FIFO_validOut             : std_logic;
  SIGNAL Stream_FIFO_lastOut              : std_logic;
  SIGNAL To_Stream_Bus_bus_data           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL To_Stream_Bus_bus_valid          : std_logic;
  SIGNAL To_Stream_Bus_bus_last           : std_logic;

BEGIN
  u_Detect_Rise_Positive : QPSK_src_Detect_Rise_Positive_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              U => AND2_out1,
              Y => captureTrigger
              );

  u_One_Shot_Capture_Control : QPSK_src_One_Shot_Capture_Control
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              validIn => AND1_out1,
              start => captureTrigger,
              length => length_out_1,  -- uint32
              readyOut => Stream_FIFO_readyIn,
              validOut => One_Shot_Capture_Control_validOut,
              lastOut => One_Shot_Capture_Control_lastOut
              );

  u_Stream_FIFO : QPSK_src_Stream_FIFO
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn => std_logic_vector(data_1),  -- uint32
              validIn => One_Shot_Capture_Control_validOut,
              lastIn => One_Shot_Capture_Control_lastOut,
              readyOut => streamOutReady,
              dataOut => Stream_FIFO_dataOut,  -- uint32
              validOut => Stream_FIFO_validOut,
              lastOut => Stream_FIFO_lastOut,
              readyIn => Stream_FIFO_readyIn
              );

  u_To_Stream_Bus : QPSK_src_To_Stream_Bus
    PORT MAP( data => Stream_FIFO_dataOut,  -- uint32
              valid => Stream_FIFO_validOut,
              last => Stream_FIFO_lastOut,
              bus_data => To_Stream_Bus_bus_data,  -- uint32
              bus_valid => To_Stream_Bus_bus_valid,
              bus_last => To_Stream_Bus_bus_last
              );

  data <= unsigned(dataBusIn_data);

  data_1 <= data;

  valid <= dataBusIn_valid;

  valid_1 <= valid;

  AND1_out1 <= enable AND valid_1;

  AND2_out1 <= enable AND capture_start;

  length_out <= unsigned(capture_length_active);

  length_out_1 <= std_logic_vector(length_out);

  streamOutBus_data <= To_Stream_Bus_bus_data;

  streamOutBus_valid <= To_Stream_Bus_bus_valid;

  streamOutBus_last <= To_Stream_Bus_bus_last;

END rtl;

