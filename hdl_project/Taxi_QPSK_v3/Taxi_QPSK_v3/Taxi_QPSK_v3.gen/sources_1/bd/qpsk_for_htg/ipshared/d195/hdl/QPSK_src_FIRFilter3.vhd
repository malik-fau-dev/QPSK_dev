-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_src_FIRFilter3.vhd
-- Created: 2025-09-17 13:27:52
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_src_FIRFilter3
-- Source Path: hdlcoder_QPSKTxRx_RFSoC/QPSK/QPSK Tx/RRC Transmit Filter/FIR Interpolator/FIRFilter3
-- Hierarchy Level: 4
-- Model version: 9.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY QPSK_src_FIRFilter3 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En16
        dataIn_im                         :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En16
        validIn                           :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(33 DOWNTO 0);  -- sfix34_En33
        dataOut_im                        :   OUT   std_logic_vector(33 DOWNTO 0);  -- sfix34_En33
        validOut                          :   OUT   std_logic
        );
END QPSK_src_FIRFilter3;


ARCHITECTURE rtl OF QPSK_src_FIRFilter3 IS

  -- Component Declarations
  COMPONENT QPSK_src_FirRdyLogic_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinSwitch_re                    :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En16
          dinSwitch_im                    :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En16
          dinVldSwitch                    :   IN    std_logic;
          coeff_re                        :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En16
          coeff_im                        :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En16
          haltProcess                     :   IN    std_logic;
          dinSM_re                        :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En16
          dinSM_im                        :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En16
          dinVldSM                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT QPSK_src_Addressable_Delay_Line_block5
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn                          :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En16
          wrEn                            :   IN    std_logic;
          wrAddr                          :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          rdAddr                          :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          delayLineEnd                    :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En16
          dataOut                         :   OUT   std_logic_vector(16 DOWNTO 0)  -- sfix17_En16
          );
  END COMPONENT;

  COMPONENT QPSK_src_FilterTapSystolic_block1
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_re                          :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En16
          coeff                           :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En17
          sumIn                           :   IN    std_logic_vector(33 DOWNTO 0);  -- sfix34_En33
          sumOut                          :   OUT   std_logic_vector(33 DOWNTO 0)  -- sfix34_En33
          );
  END COMPONENT;

  COMPONENT QPSK_src_Addressable_Delay_Line_block6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn                          :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En16
          wrEn                            :   IN    std_logic;
          wrAddr                          :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          rdAddr                          :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          delayLineEnd                    :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En16
          dataOut                         :   OUT   std_logic_vector(16 DOWNTO 0)  -- sfix17_En16
          );
  END COMPONENT;

  COMPONENT QPSK_src_FilterTapSystolic_block2
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_im                          :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En16
          coeff                           :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En17
          sumIn                           :   IN    std_logic_vector(33 DOWNTO 0);  -- sfix34_En33
          sumOut                          :   OUT   std_logic_vector(33 DOWNTO 0)  -- sfix34_En33
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : QPSK_src_FirRdyLogic_block1
    USE ENTITY work.QPSK_src_FirRdyLogic_block1(rtl);

  FOR ALL : QPSK_src_Addressable_Delay_Line_block5
    USE ENTITY work.QPSK_src_Addressable_Delay_Line_block5(rtl);

  FOR ALL : QPSK_src_FilterTapSystolic_block1
    USE ENTITY work.QPSK_src_FilterTapSystolic_block1(rtl);

  FOR ALL : QPSK_src_Addressable_Delay_Line_block6
    USE ENTITY work.QPSK_src_Addressable_Delay_Line_block6(rtl);

  FOR ALL : QPSK_src_FilterTapSystolic_block2
    USE ENTITY work.QPSK_src_FilterTapSystolic_block2(rtl);

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL coeff_re                         : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL coeff_im                         : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL haltProcess                      : std_logic;
  SIGNAL dinSM_re                         : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL dinSM_im                         : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL dinVldSM                         : std_logic;
  SIGNAL nextDelayLineRdAddrReverse       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rdCountReverse_1                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL nextDelayLineWrAddr              : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL wrCount_1                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL nextDelayLineRdAddr              : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rdCount_1                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL nextSharingCount                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL sharingCount_1                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL delayLineValidInP                : std_logic;
  SIGNAL lastPhaseStrobe                  : std_logic;
  SIGNAL delayLineShiftEnP                : std_logic;
  SIGNAL delayLineShiftEn1_1              : std_logic;
  SIGNAL validOutLookahead_reg            : std_logic_vector(6 DOWNTO 0);  -- ufix1 [7]
  SIGNAL validOutLookahead_1              : std_logic;
  SIGNAL vldOut_1                         : std_logic;
  SIGNAL notValid                         : std_logic;
  SIGNAL rdAddr0_1                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rdAddr1                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rdAddrEndNonZero                 : std_logic;
  SIGNAL rdAddrEndZero                    : std_logic;
  SIGNAL finalSumValidPipe_reg            : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL accumulate                       : std_logic;
  SIGNAL accDataOut                       : signed(33 DOWNTO 0);  -- sfix34_En33
  SIGNAL wrAddrP                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rdAddrDelayLine0                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL delayLineEnd0                    : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL delayLineDataOut0                : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL delayLineEnd0_signed             : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL delayLineDataIn1_1               : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL wrAddr1                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rdAddrDelayLine1                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL coeffTableOut1                   : signed(16 DOWNTO 0);  -- sfix17_En17
  SIGNAL delayLineEnd1deadOut             : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL delayLineDataOut1                : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL coeffTableRegP1_1                : signed(16 DOWNTO 0) := to_signed(16#00000#, 17);  -- sfix17_En17
  SIGNAL coeffTableOut0                   : signed(16 DOWNTO 0);  -- sfix17_En17
  SIGNAL coeffTableRegP0_1                : signed(16 DOWNTO 0) := to_signed(16#00000#, 17);  -- sfix17_En17
  SIGNAL sumIn                            : signed(33 DOWNTO 0);  -- sfix34_En33
  SIGNAL sumOut                           : std_logic_vector(33 DOWNTO 0);  -- ufix34
  SIGNAL sumOut_0                         : std_logic_vector(33 DOWNTO 0);  -- ufix34
  SIGNAL sumOut_0_signed                  : signed(33 DOWNTO 0);  -- sfix34_En33
  SIGNAL sumOutReg_1                      : signed(33 DOWNTO 0);  -- sfix34_En33
  SIGNAL accDataOut_1                     : signed(33 DOWNTO 0);  -- sfix34_En33
  SIGNAL accSwitchOut                     : signed(33 DOWNTO 0);  -- sfix34_En33
  SIGNAL accAdderOut                      : signed(33 DOWNTO 0);  -- sfix34_En33
  SIGNAL dout_re_1                        : signed(33 DOWNTO 0);  -- sfix34_En33
  SIGNAL validOutLookahead_reg_1          : std_logic_vector(6 DOWNTO 0);  -- ufix1 [7]
  SIGNAL validOutLookahead_3              : std_logic;
  SIGNAL rdAddrEndNonZero_1               : std_logic;
  SIGNAL rdAddrEndZero_1                  : std_logic;
  SIGNAL finalSumValidPipe_reg_1          : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL accumulate_1                     : std_logic;
  SIGNAL accDataOut_3                     : signed(33 DOWNTO 0);  -- sfix34_En33
  SIGNAL delayLineEnd0_1                  : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL delayLineDataOut0_1              : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL delayLineEnd0_signed_1           : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL delayLineDataIn1_3               : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL coeffTableOut1_1                 : signed(16 DOWNTO 0);  -- sfix17_En17
  SIGNAL delayLineEnd1deadOut_1           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL delayLineDataOut1_1              : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL coeffTableRegP1_3                : signed(16 DOWNTO 0) := to_signed(16#00000#, 17);  -- sfix17_En17
  SIGNAL coeffTableOut0_1                 : signed(16 DOWNTO 0);  -- sfix17_En17
  SIGNAL coeffTableRegP0_3                : signed(16 DOWNTO 0) := to_signed(16#00000#, 17);  -- sfix17_En17
  SIGNAL sumIn_1                          : signed(33 DOWNTO 0);  -- sfix34_En33
  SIGNAL sumOut_1                         : std_logic_vector(33 DOWNTO 0);  -- ufix34
  SIGNAL sumOut_0_1                       : std_logic_vector(33 DOWNTO 0);  -- ufix34
  SIGNAL sumOut_0_signed_1                : signed(33 DOWNTO 0);  -- sfix34_En33
  SIGNAL sumOutReg_3                      : signed(33 DOWNTO 0);  -- sfix34_En33
  SIGNAL accDataOut_4                     : signed(33 DOWNTO 0);  -- sfix34_En33
  SIGNAL accSwitchOut_1                   : signed(33 DOWNTO 0);  -- sfix34_En33
  SIGNAL accAdderOut_1                    : signed(33 DOWNTO 0);  -- sfix34_En33
  SIGNAL dout_im_1                        : signed(33 DOWNTO 0);  -- sfix34_En33
  SIGNAL dataZero                         : signed(33 DOWNTO 0);  -- sfix34_En33
  SIGNAL dataZero_dtc_re                  : signed(33 DOWNTO 0);  -- sfix34_En33
  SIGNAL dataZero_dtc_im                  : signed(33 DOWNTO 0);  -- sfix34_En33
  SIGNAL dout_cmplxSW_re                  : signed(33 DOWNTO 0);  -- sfix34_En33
  SIGNAL dout_cmplxSW_im                  : signed(33 DOWNTO 0);  -- sfix34_En33

BEGIN
  u_firRdyLogic : QPSK_src_FirRdyLogic_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dinSwitch_re => dataIn_re,  -- sfix17_En16
              dinSwitch_im => dataIn_im,  -- sfix17_En16
              dinVldSwitch => validIn,
              coeff_re => std_logic_vector(coeff_re),  -- sfix17_En16
              coeff_im => std_logic_vector(coeff_im),  -- sfix17_En16
              haltProcess => haltProcess,
              dinSM_re => dinSM_re,  -- sfix17_En16
              dinSM_im => dinSM_im,  -- sfix17_En16
              dinVldSM => dinVldSM
              );

  u_delayLine0 : QPSK_src_Addressable_Delay_Line_block5
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn => dinSM_re,  -- sfix17_En16
              wrEn => delayLineValidInP,
              wrAddr => std_logic_vector(wrAddrP),  -- ufix2
              rdAddr => std_logic_vector(rdAddrDelayLine0),  -- ufix2
              delayLineEnd => delayLineEnd0,  -- sfix17_En16
              dataOut => delayLineDataOut0  -- sfix17_En16
              );

  u_delayLine1 : QPSK_src_Addressable_Delay_Line_block5
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn1_1),  -- sfix17_En16
              wrEn => delayLineShiftEn1_1,
              wrAddr => std_logic_vector(wrAddr1),  -- ufix2
              rdAddr => std_logic_vector(rdAddrDelayLine1),  -- ufix2
              delayLineEnd => delayLineEnd1deadOut,  -- sfix17_En16
              dataOut => delayLineDataOut1  -- sfix17_En16
              );

  u_filterTap0 : QPSK_src_FilterTapSystolic_block1
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut0,  -- sfix17_En16
              coeff => std_logic_vector(coeffTableRegP0_1),  -- sfix17_En17
              sumIn => std_logic_vector(sumIn),  -- sfix34_En33
              sumOut => sumOut  -- sfix34_En33
              );

  u_filterTap1 : QPSK_src_FilterTapSystolic_block1
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut1,  -- sfix17_En16
              coeff => std_logic_vector(coeffTableRegP1_1),  -- sfix17_En17
              sumIn => sumOut,  -- sfix34_En33
              sumOut => sumOut_0  -- sfix34_En33
              );

  u_delayLine0_1 : QPSK_src_Addressable_Delay_Line_block6
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn => dinSM_im,  -- sfix17_En16
              wrEn => delayLineValidInP,
              wrAddr => std_logic_vector(wrAddrP),  -- ufix2
              rdAddr => std_logic_vector(rdAddrDelayLine0),  -- ufix2
              delayLineEnd => delayLineEnd0_1,  -- sfix17_En16
              dataOut => delayLineDataOut0_1  -- sfix17_En16
              );

  u_delayLine1_1 : QPSK_src_Addressable_Delay_Line_block6
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn1_3),  -- sfix17_En16
              wrEn => delayLineShiftEn1_1,
              wrAddr => std_logic_vector(wrAddr1),  -- ufix2
              rdAddr => std_logic_vector(rdAddrDelayLine1),  -- ufix2
              delayLineEnd => delayLineEnd1deadOut_1,  -- sfix17_En16
              dataOut => delayLineDataOut1_1  -- sfix17_En16
              );

  u_filterTap0_1 : QPSK_src_FilterTapSystolic_block2
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut0_1,  -- sfix17_En16
              coeff => std_logic_vector(coeffTableRegP0_3),  -- sfix17_En17
              sumIn => std_logic_vector(sumIn_1),  -- sfix34_En33
              sumOut => sumOut_1  -- sfix34_En33
              );

  u_filterTap1_1 : QPSK_src_FilterTapSystolic_block2
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut1_1,  -- sfix17_En16
              coeff => std_logic_vector(coeffTableRegP1_3),  -- sfix17_En17
              sumIn => sumOut_1,  -- sfix34_En33
              sumOut => sumOut_0_1  -- sfix34_En33
              );

  coeff_re <= to_signed(16#00000#, 17);
  coeff_im <= to_signed(16#00000#, 17);

  haltProcess <= '0';

  rdCountReverse_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        rdCountReverse_1 <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        rdCountReverse_1 <= nextDelayLineRdAddrReverse;
      END IF;
    END IF;
  END PROCESS rdCountReverse_process;


  wrCount_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        wrCount_1 <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        wrCount_1 <= nextDelayLineWrAddr;
      END IF;
    END IF;
  END PROCESS wrCount_process;


  rdCount_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        rdCount_1 <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        rdCount_1 <= nextDelayLineRdAddr;
      END IF;
    END IF;
  END PROCESS rdCount_process;


  sharingCount_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sharingCount_1 <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        sharingCount_1 <= nextSharingCount;
      END IF;
    END IF;
  END PROCESS sharingCount_process;


  -- Input control counter combinatorial logic
  InputControl_output : PROCESS (dinVldSM, rdCountReverse_1, rdCount_1, sharingCount_1, wrCount_1)
    VARIABLE out4 : unsigned(1 DOWNTO 0);
  BEGIN
    delayLineValidInP <= hdlcoder_to_stdlogic((sharingCount_1 = to_unsigned(16#0#, 2)) AND (dinVldSM = '1'));
    lastPhaseStrobe <= hdlcoder_to_stdlogic(sharingCount_1 = to_unsigned(16#2#, 2));
    IF (dinVldSM = '1') OR (sharingCount_1 > to_unsigned(16#0#, 2)) THEN 
      IF sharingCount_1 = to_unsigned(16#3#, 2) THEN 
        nextSharingCount <= to_unsigned(16#0#, 2);
      ELSE 
        nextSharingCount <= sharingCount_1 + to_unsigned(16#1#, 2);
      END IF;
    ELSE 
      nextSharingCount <= sharingCount_1;
    END IF;
    IF dinVldSM = '1' THEN 
      IF wrCount_1 = to_unsigned(16#2#, 2) THEN 
        out4 := to_unsigned(16#0#, 2);
      ELSE 
        out4 := wrCount_1 + to_unsigned(16#1#, 2);
      END IF;
    ELSE 
      out4 := wrCount_1;
    END IF;
    IF (rdCount_1 /= out4) OR (dinVldSM = '1') THEN 
      IF rdCount_1 = to_unsigned(16#0#, 2) THEN 
        nextDelayLineRdAddr <= to_unsigned(16#2#, 2);
      ELSE 
        nextDelayLineRdAddr <= rdCount_1 - to_unsigned(16#1#, 2);
      END IF;
    ELSE 
      nextDelayLineRdAddr <= rdCount_1;
    END IF;
    IF (sharingCount_1 > to_unsigned(16#0#, 2)) OR (dinVldSM = '1') THEN 
      IF sharingCount_1 = to_unsigned(16#3#, 2) THEN 
        IF wrCount_1 = to_unsigned(16#2#, 2) THEN 
          nextDelayLineRdAddrReverse <= to_unsigned(16#0#, 2);
        ELSE 
          nextDelayLineRdAddrReverse <= wrCount_1 + to_unsigned(16#1#, 2);
        END IF;
      ELSIF rdCountReverse_1 = to_unsigned(16#2#, 2) THEN 
        nextDelayLineRdAddrReverse <= to_unsigned(16#0#, 2);
      ELSE 
        nextDelayLineRdAddrReverse <= rdCountReverse_1 + to_unsigned(16#1#, 2);
      END IF;
    ELSE 
      nextDelayLineRdAddrReverse <= rdCountReverse_1;
    END IF;
    nextDelayLineWrAddr <= out4;
  END PROCESS InputControl_output;


  delayLineShiftEn0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayLineShiftEnP <= '0';
      ELSIF enb = '1' THEN
        delayLineShiftEnP <= lastPhaseStrobe;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn0_process;


  delayLineShiftEn1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayLineShiftEn1_1 <= '0';
      ELSIF enb = '1' THEN
        delayLineShiftEn1_1 <= delayLineShiftEnP;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn1_process;


  validOutLookahead_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        validOutLookahead_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        validOutLookahead_reg(0) <= delayLineShiftEn1_1;
        validOutLookahead_reg(6 DOWNTO 1) <= validOutLookahead_reg(5 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS validOutLookahead_process;

  validOutLookahead_1 <= validOutLookahead_reg(6);

  vldOut_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        vldOut_1 <= '0';
      ELSIF enb = '1' THEN
        vldOut_1 <= validOutLookahead_1;
      END IF;
    END IF;
  END PROCESS vldOut_process;


  notValid <=  NOT vldOut_1;

  rdAddr0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        rdAddr0_1 <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        rdAddr0_1 <= sharingCount_1;
      END IF;
    END IF;
  END PROCESS rdAddr0_process;


  rdAddr0_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        rdAddr1 <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        rdAddr1 <= rdAddr0_1;
      END IF;
    END IF;
  END PROCESS rdAddr0_2_process;


  
  rdAddrEndNonZero <= '1' WHEN rdAddr1 /= to_unsigned(16#0#, 2) ELSE
      '0';

  rdAddrEndZero <=  NOT rdAddrEndNonZero;

  finalSumValidPipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        finalSumValidPipe_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        finalSumValidPipe_reg(0) <= rdAddrEndZero;
        finalSumValidPipe_reg(5 DOWNTO 1) <= finalSumValidPipe_reg(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS finalSumValidPipe_process;

  accumulate <= finalSumValidPipe_reg(5);

  accDataOut <= to_signed(0, 34);

  wrAddr_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        wrAddrP <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        wrAddrP <= wrCount_1;
      END IF;
    END IF;
  END PROCESS wrAddr_process;


  rdAddrDelayLine_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        rdAddrDelayLine0 <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        rdAddrDelayLine0 <= rdCount_1;
      END IF;
    END IF;
  END PROCESS rdAddrDelayLine_process;


  delayLineEnd0_signed <= signed(delayLineEnd0);

  delayLineDataIn1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayLineDataIn1_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        delayLineDataIn1_1 <= delayLineEnd0_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn1_process;


  wrAddr0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        wrAddr1 <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        wrAddr1 <= wrAddrP;
      END IF;
    END IF;
  END PROCESS wrAddr0_process;


  rdAddrDelayLine0_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        rdAddrDelayLine1 <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        rdAddrDelayLine1 <= rdAddrDelayLine0;
      END IF;
    END IF;
  END PROCESS rdAddrDelayLine0_1_process;


  -- Coefficient table for multiplier1
  coeffTable1_output : PROCESS (rdAddr1)
  BEGIN
    CASE rdAddr1 IS
      WHEN "00" =>
        coeffTableOut1 <= to_signed(-16#01337#, 17);
      WHEN "01" =>
        coeffTableOut1 <= to_signed(16#00000#, 17);
      WHEN "10" =>
        coeffTableOut1 <= to_signed(16#00000#, 17);
      WHEN OTHERS => 
        coeffTableOut1 <= to_signed(16#00000#, 17);
    END CASE;
  END PROCESS coeffTable1_output;


  coeffTableRegP1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP1_1 <= coeffTableOut1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP1_process;


  -- Coefficient table for multiplier0
  coeffTable0_output : PROCESS (rdAddr0_1)
  BEGIN
    CASE rdAddr0_1 IS
      WHEN "00" =>
        coeffTableOut0 <= to_signed(-16#01337#, 17);
      WHEN "01" =>
        coeffTableOut0 <= to_signed(16#0942F#, 17);
      WHEN "10" =>
        coeffTableOut0 <= to_signed(16#0942F#, 17);
      WHEN OTHERS => 
        coeffTableOut0 <= to_signed(16#00000#, 17);
    END CASE;
  END PROCESS coeffTable0_output;


  coeffTableRegP0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP0_1 <= coeffTableOut0;
      END IF;
    END IF;
  END PROCESS coeffTableRegP0_process;


  sumIn <= to_signed(0, 34);

  sumOut_0_signed <= signed(sumOut_0);

  sumOutReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sumOutReg_1 <= to_signed(0, 34);
      ELSIF enb = '1' THEN
        sumOutReg_1 <= sumOut_0_signed;
      END IF;
    END IF;
  END PROCESS sumOutReg_process;


  
  accSwitchOut <= accDataOut_1 WHEN accumulate = '0' ELSE
      accDataOut;

  accAdderOut <= accSwitchOut + sumOutReg_1;

  accDataOut_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        accDataOut_1 <= to_signed(0, 34);
      ELSIF enb = '1' THEN
        accDataOut_1 <= accAdderOut;
      END IF;
    END IF;
  END PROCESS accDataOut_2_process;


  dout_re_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dout_re_1 <= to_signed(0, 34);
      ELSIF enb = '1' AND validOutLookahead_1 = '1' THEN
        dout_re_1 <= accDataOut_1;
      END IF;
    END IF;
  END PROCESS dout_re_process;


  validOutLookahead_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        validOutLookahead_reg_1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        validOutLookahead_reg_1(0) <= delayLineShiftEn1_1;
        validOutLookahead_reg_1(6 DOWNTO 1) <= validOutLookahead_reg_1(5 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS validOutLookahead_2_process;

  validOutLookahead_3 <= validOutLookahead_reg_1(6);

  
  rdAddrEndNonZero_1 <= '1' WHEN rdAddr1 /= to_unsigned(16#0#, 2) ELSE
      '0';

  rdAddrEndZero_1 <=  NOT rdAddrEndNonZero_1;

  finalSumValidPipe_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        finalSumValidPipe_reg_1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        finalSumValidPipe_reg_1(0) <= rdAddrEndZero_1;
        finalSumValidPipe_reg_1(5 DOWNTO 1) <= finalSumValidPipe_reg_1(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS finalSumValidPipe_1_process;

  accumulate_1 <= finalSumValidPipe_reg_1(5);

  accDataOut_3 <= to_signed(0, 34);

  delayLineEnd0_signed_1 <= signed(delayLineEnd0_1);

  delayLineDataIn1_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayLineDataIn1_3 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        delayLineDataIn1_3 <= delayLineEnd0_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn1_2_process;


  -- Coefficient table for multiplier1
  coeffTable1_1_output : PROCESS (rdAddr1)
  BEGIN
    CASE rdAddr1 IS
      WHEN "00" =>
        coeffTableOut1_1 <= to_signed(-16#01337#, 17);
      WHEN "01" =>
        coeffTableOut1_1 <= to_signed(16#00000#, 17);
      WHEN "10" =>
        coeffTableOut1_1 <= to_signed(16#00000#, 17);
      WHEN OTHERS => 
        coeffTableOut1_1 <= to_signed(16#00000#, 17);
    END CASE;
  END PROCESS coeffTable1_1_output;


  coeffTableRegP1_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP1_3 <= coeffTableOut1_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP1_2_process;


  -- Coefficient table for multiplier0
  coeffTable0_1_output : PROCESS (rdAddr0_1)
  BEGIN
    CASE rdAddr0_1 IS
      WHEN "00" =>
        coeffTableOut0_1 <= to_signed(-16#01337#, 17);
      WHEN "01" =>
        coeffTableOut0_1 <= to_signed(16#0942F#, 17);
      WHEN "10" =>
        coeffTableOut0_1 <= to_signed(16#0942F#, 17);
      WHEN OTHERS => 
        coeffTableOut0_1 <= to_signed(16#00000#, 17);
    END CASE;
  END PROCESS coeffTable0_1_output;


  coeffTableRegP0_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP0_3 <= coeffTableOut0_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP0_2_process;


  sumIn_1 <= to_signed(0, 34);

  sumOut_0_signed_1 <= signed(sumOut_0_1);

  sumOutReg_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sumOutReg_3 <= to_signed(0, 34);
      ELSIF enb = '1' THEN
        sumOutReg_3 <= sumOut_0_signed_1;
      END IF;
    END IF;
  END PROCESS sumOutReg_2_process;


  
  accSwitchOut_1 <= accDataOut_4 WHEN accumulate_1 = '0' ELSE
      accDataOut_3;

  accAdderOut_1 <= accSwitchOut_1 + sumOutReg_3;

  accDataOut_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        accDataOut_4 <= to_signed(0, 34);
      ELSIF enb = '1' THEN
        accDataOut_4 <= accAdderOut_1;
      END IF;
    END IF;
  END PROCESS accDataOut_5_process;


  dout_im_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dout_im_1 <= to_signed(0, 34);
      ELSIF enb = '1' AND validOutLookahead_3 = '1' THEN
        dout_im_1 <= accDataOut_4;
      END IF;
    END IF;
  END PROCESS dout_im_process;


  dataZero <= to_signed(0, 34);

  dataZero_dtc_re <= dataZero;
  dataZero_dtc_im <= to_signed(0, 34);

  
  dout_cmplxSW_re <= dout_re_1 WHEN notValid = '0' ELSE
      dataZero_dtc_re;
  
  dout_cmplxSW_im <= dout_im_1 WHEN notValid = '0' ELSE
      dataZero_dtc_im;

  dataOut_re <= std_logic_vector(dout_cmplxSW_re);

  dataOut_im <= std_logic_vector(dout_cmplxSW_im);

  validOut <= vldOut_1;

END rtl;

