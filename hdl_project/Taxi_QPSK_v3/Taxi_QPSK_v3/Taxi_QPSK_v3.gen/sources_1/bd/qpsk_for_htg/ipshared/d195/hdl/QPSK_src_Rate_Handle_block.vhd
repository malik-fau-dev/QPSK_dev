-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_src_Rate_Handle_block.vhd
-- Created: 2025-09-17 13:27:52
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_src_Rate_Handle_block
-- Source Path: hdlcoder_QPSKTxRx_RFSoC/QPSK/QPSK Rx/Frequency and Time Synchronizer/Symbol Synchronizer/Rate Handle
-- Hierarchy Level: 4
-- Model version: 9.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY QPSK_src_Rate_Handle_block IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_4_0                         :   IN    std_logic;
        enb_1_4_2                         :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        strobe                            :   IN    std_logic;
        validIn                           :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        validOut                          :   OUT   std_logic
        );
END QPSK_src_Rate_Handle_block;


ARCHITECTURE rtl OF QPSK_src_Rate_Handle_block IS

  -- Component Declarations
  COMPONENT QPSK_src_Symbol_FIFO
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          push                            :   IN    std_logic;
          pop                             :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : QPSK_src_Symbol_FIFO
    USE ENTITY work.QPSK_src_Symbol_FIFO(rtl);

  -- Signals
  SIGNAL count_step                       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL count_from                       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL HDL_Counter_out1                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL count                            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL count_1                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Symbol_FIFO_dataOut_re           : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Symbol_FIFO_dataOut_im           : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Symbol_FIFO_dataOut_re_signed    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Symbol_FIFO_dataOut_im_signed    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Downsample_ds_out_re             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Downsample_ds_out_im             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Downsample_out1_re               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Downsample_out1_im               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay_reg                        : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Downsample1_ds_out               : std_logic;
  SIGNAL Downsample1_out1                 : std_logic;

BEGIN
  u_Symbol_FIFO : QPSK_src_Symbol_FIFO
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn_re => dataIn_re,  -- sfix16_En14
              dataIn_im => dataIn_im,  -- sfix16_En14
              push => strobe,
              pop => Logical_Operator_out1,
              dataOut_re => Symbol_FIFO_dataOut_re,  -- sfix16_En14
              dataOut_im => Symbol_FIFO_dataOut_im  -- sfix16_En14
              );

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 3
  count_step <= to_unsigned(16#1#, 2);

  count_from <= to_unsigned(16#0#, 2);

  count <= HDL_Counter_out1 + count_step;

  
  need_to_wrap <= '1' WHEN HDL_Counter_out1 = to_unsigned(16#3#, 2) ELSE
      '0';

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  
  count_1 <= HDL_Counter_out1 WHEN validIn = '0' ELSE
      count_value;

  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HDL_Counter_out1 <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        HDL_Counter_out1 <= count_1;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  
  Compare_To_Constant_out1 <= '1' WHEN HDL_Counter_out1 = to_unsigned(16#0#, 2) ELSE
      '0';

  Logical_Operator_out1 <= validIn AND Compare_To_Constant_out1;

  Symbol_FIFO_dataOut_re_signed <= signed(Symbol_FIFO_dataOut_re);

  Symbol_FIFO_dataOut_im_signed <= signed(Symbol_FIFO_dataOut_im);

  -- Downsample register
  Downsample_ds_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Downsample_ds_out_re <= to_signed(16#0000#, 16);
        Downsample_ds_out_im <= to_signed(16#0000#, 16);
      ELSIF enb_1_4_2 = '1' THEN
        Downsample_ds_out_re <= Symbol_FIFO_dataOut_re_signed;
        Downsample_ds_out_im <= Symbol_FIFO_dataOut_im_signed;
      END IF;
    END IF;
  END PROCESS Downsample_ds_process;


  -- Downsample output register
  Downsample_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Downsample_out1_re <= to_signed(16#0000#, 16);
        Downsample_out1_im <= to_signed(16#0000#, 16);
      ELSIF enb_1_4_0 = '1' THEN
        Downsample_out1_re <= Downsample_ds_out_re;
        Downsample_out1_im <= Downsample_ds_out_im;
      END IF;
    END IF;
  END PROCESS Downsample_output_process;


  dataOut_re <= std_logic_vector(Downsample_out1_re);

  dataOut_im <= std_logic_vector(Downsample_out1_im);

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay_reg(0) <= validIn;
        Delay_reg(3 DOWNTO 1) <= Delay_reg(2 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1 <= Delay_reg(3);

  -- Downsample register
  Downsample1_ds_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Downsample1_ds_out <= '0';
      ELSIF enb_1_4_2 = '1' THEN
        Downsample1_ds_out <= Delay_out1;
      END IF;
    END IF;
  END PROCESS Downsample1_ds_process;


  -- Downsample output register
  Downsample1_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Downsample1_out1 <= '0';
      ELSIF enb_1_4_0 = '1' THEN
        Downsample1_out1 <= Downsample1_ds_out;
      END IF;
    END IF;
  END PROCESS Downsample1_output_process;


  validOut <= Downsample1_out1;

END rtl;

