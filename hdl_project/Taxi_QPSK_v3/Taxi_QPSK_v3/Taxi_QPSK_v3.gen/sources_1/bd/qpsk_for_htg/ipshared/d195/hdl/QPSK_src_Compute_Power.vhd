-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_src_Compute_Power.vhd
-- Created: 2025-09-17 13:27:52
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_src_Compute_Power
-- Source Path: hdlcoder_QPSKTxRx_RFSoC/QPSK/QPSK Rx/Digital AGC/Power Threshold/Compute Power
-- Hierarchy Level: 4
-- Model version: 9.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY QPSK_src_Compute_Power IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        In1_re                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        In1_im                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        Out1                              :   OUT   std_logic_vector(32 DOWNTO 0)  -- sfix33_En28
        );
END QPSK_src_Compute_Power;


ARCHITECTURE rtl OF QPSK_src_Compute_Power IS

  -- Signals
  SIGNAL In1_re_signed                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL In1_im_signed                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay2_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product_out1                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay6_out1                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay3_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay4_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product1_out1                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay5_out1                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_add_cast                     : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add_add_cast_1                   : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add_out1                         : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Delay7_out1                      : signed(32 DOWNTO 0);  -- sfix33_En28

BEGIN
  In1_re_signed <= signed(In1_re);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay1_out1 <= In1_re_signed;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay2_out1 <= In1_re_signed;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Product_out1 <= Delay1_out1 * Delay2_out1;

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay6_out1 <= Product_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  In1_im_signed <= signed(In1_im);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay3_out1 <= In1_im_signed;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay4_out1 <= In1_im_signed;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Product1_out1 <= Delay3_out1 * Delay4_out1;

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay5_out1 <= Product1_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Add_add_cast <= resize(Delay6_out1, 33);
  Add_add_cast_1 <= resize(Delay5_out1, 33);
  Add_out1 <= Add_add_cast + Add_add_cast_1;

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1 <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        Delay7_out1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  Out1 <= std_logic_vector(Delay7_out1);

END rtl;

