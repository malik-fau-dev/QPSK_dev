-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_src_Scalar_to_Vector_Stream_Conversion.vhd
-- Created: 2025-09-17 13:27:52
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_src_Scalar_to_Vector_Stream_Conversion
-- Source Path: hdlcoder_QPSKTxRx_RFSoC/QPSK/QPSK Rx/Pack Bits/Scalar to Vector Stream Conversion
-- Hierarchy Level: 3
-- Model version: 9.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY QPSK_src_Scalar_to_Vector_Stream_Conversion IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn                            :   IN    std_logic;
        validIn                           :   IN    std_logic;
        dataOut                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- boolean [32]
        validOut                          :   OUT   std_logic
        );
END QPSK_src_Scalar_to_Vector_Stream_Conversion;


ARCHITECTURE rtl OF QPSK_src_Scalar_to_Vector_Stream_Conversion IS

  -- Component Declarations
  COMPONENT QPSK_src_Tapped_Delay_Enabled
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          u                               :   IN    std_logic;
          en                              :   IN    std_logic;
          y                               :   OUT   std_logic_vector(31 DOWNTO 0)  -- boolean [32]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : QPSK_src_Tapped_Delay_Enabled
    USE ENTITY work.QPSK_src_Tapped_Delay_Enabled(rtl);

  -- Signals
  SIGNAL Tapped_Delay_Enabled_y           : std_logic_vector(31 DOWNTO 0);  -- boolean [32]
  SIGNAL count_step                       : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL count_reset                      : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL HDL_Counter_out1                 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL count                            : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL count_1                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL AND_out1                         : std_logic;
  SIGNAL count_2                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Unit_Delay_out1                  : std_logic;

BEGIN
  u_Tapped_Delay_Enabled : QPSK_src_Tapped_Delay_Enabled
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              u => dataIn,
              en => validIn,
              y => Tapped_Delay_Enabled_y  -- boolean [32]
              );

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  count_step <= to_unsigned(16#01#, 5);

  count_reset <= to_unsigned(16#00#, 5);

  count <= HDL_Counter_out1 + count_step;

  
  count_1 <= HDL_Counter_out1 WHEN validIn = '0' ELSE
      count;

  
  count_2 <= count_1 WHEN AND_out1 = '0' ELSE
      count_reset;

  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HDL_Counter_out1 <= to_unsigned(16#00#, 5);
      ELSIF enb = '1' THEN
        HDL_Counter_out1 <= count_2;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  
  Compare_To_Constant_out1 <= '1' WHEN HDL_Counter_out1 = to_unsigned(16#1F#, 5) ELSE
      '0';

  AND_out1 <= Compare_To_Constant_out1 AND validIn;

  Unit_Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Unit_Delay_out1 <= '0';
      ELSIF enb = '1' THEN
        Unit_Delay_out1 <= AND_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;


  dataOut <= Tapped_Delay_Enabled_y;

  validOut <= Unit_Delay_out1;

END rtl;

