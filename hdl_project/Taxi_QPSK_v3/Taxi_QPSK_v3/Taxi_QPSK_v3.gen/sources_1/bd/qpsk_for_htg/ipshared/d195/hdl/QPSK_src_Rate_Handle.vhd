-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_src_Rate_Handle.vhd
-- Created: 2025-09-17 13:27:52
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_src_Rate_Handle
-- Source Path: hdlcoder_QPSKTxRx_RFSoC/QPSK/QPSK Rx/Frequency and Time Synchronizer/Rate Handle
-- Hierarchy Level: 3
-- Model version: 9.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY QPSK_src_Rate_Handle IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_4_1                         :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        startIn                           :   IN    std_logic;
        endIn                             :   IN    std_logic;
        validIn                           :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        startOut                          :   OUT   std_logic;
        endOut                            :   OUT   std_logic;
        validOut                          :   OUT   std_logic
        );
END QPSK_src_Rate_Handle;


ARCHITECTURE rtl OF QPSK_src_Rate_Handle IS

  -- Signals
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Upsample_zero_re                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Upsample_zero_im                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Upsample_muxout_re               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Upsample_muxout_im               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Upsample_bypass_reg_re           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Upsample_bypass_reg_im           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Upsample_bypassout_re            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Upsample_bypassout_im            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Upsample1_zero                   : std_logic;
  SIGNAL Upsample1_muxout                 : std_logic;
  SIGNAL Upsample1_bypass_reg             : std_logic;  -- ufix1
  SIGNAL Upsample1_bypassout              : std_logic;
  SIGNAL Upsample2_zero                   : std_logic;
  SIGNAL Upsample2_muxout                 : std_logic;
  SIGNAL Upsample2_bypass_reg             : std_logic;  -- ufix1
  SIGNAL Upsample2_bypassout              : std_logic;
  SIGNAL Upsample3_zero                   : std_logic;
  SIGNAL Upsample3_muxout                 : std_logic;
  SIGNAL Upsample3_bypass_reg             : std_logic;  -- ufix1
  SIGNAL Upsample3_bypassout              : std_logic;

BEGIN
  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  Upsample_zero_re <= to_signed(16#0000#, 16);
  Upsample_zero_im <= to_signed(16#0000#, 16);

  -- Upsample: Upsample by 4, Sample offset 0 
  
  Upsample_muxout_re <= dataIn_re_signed WHEN enb_1_4_1 = '1' ELSE
      Upsample_zero_re;
  
  Upsample_muxout_im <= dataIn_im_signed WHEN enb_1_4_1 = '1' ELSE
      Upsample_zero_im;

  -- Upsample bypass register
  Upsample_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Upsample_bypass_reg_re <= to_signed(16#0000#, 16);
        Upsample_bypass_reg_im <= to_signed(16#0000#, 16);
      ELSIF enb_1_1_1 = '1' THEN
        Upsample_bypass_reg_im <= Upsample_muxout_im;
        Upsample_bypass_reg_re <= Upsample_muxout_re;
      END IF;
    END IF;
  END PROCESS Upsample_bypass_process;

  
  Upsample_bypassout_re <= Upsample_muxout_re WHEN enb_1_1_1 = '1' ELSE
      Upsample_bypass_reg_re;
  
  Upsample_bypassout_im <= Upsample_muxout_im WHEN enb_1_1_1 = '1' ELSE
      Upsample_bypass_reg_im;

  dataOut_re <= std_logic_vector(Upsample_bypassout_re);

  dataOut_im <= std_logic_vector(Upsample_bypassout_im);

  Upsample1_zero <= '0';

  -- Upsample1: Upsample by 4, Sample offset 0 
  
  Upsample1_muxout <= startIn WHEN enb_1_4_1 = '1' ELSE
      Upsample1_zero;

  -- Upsample bypass register
  Upsample1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Upsample1_bypass_reg <= '0';
      ELSIF enb_1_1_1 = '1' THEN
        Upsample1_bypass_reg <= Upsample1_muxout;
      END IF;
    END IF;
  END PROCESS Upsample1_bypass_process;

  
  Upsample1_bypassout <= Upsample1_muxout WHEN enb_1_1_1 = '1' ELSE
      Upsample1_bypass_reg;

  Upsample2_zero <= '0';

  -- Upsample2: Upsample by 4, Sample offset 0 
  
  Upsample2_muxout <= endIn WHEN enb_1_4_1 = '1' ELSE
      Upsample2_zero;

  -- Upsample bypass register
  Upsample2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Upsample2_bypass_reg <= '0';
      ELSIF enb_1_1_1 = '1' THEN
        Upsample2_bypass_reg <= Upsample2_muxout;
      END IF;
    END IF;
  END PROCESS Upsample2_bypass_process;

  
  Upsample2_bypassout <= Upsample2_muxout WHEN enb_1_1_1 = '1' ELSE
      Upsample2_bypass_reg;

  Upsample3_zero <= '0';

  -- Upsample3: Upsample by 4, Sample offset 0 
  
  Upsample3_muxout <= validIn WHEN enb_1_4_1 = '1' ELSE
      Upsample3_zero;

  -- Upsample bypass register
  Upsample3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Upsample3_bypass_reg <= '0';
      ELSIF enb_1_1_1 = '1' THEN
        Upsample3_bypass_reg <= Upsample3_muxout;
      END IF;
    END IF;
  END PROCESS Upsample3_bypass_process;

  
  Upsample3_bypassout <= Upsample3_muxout WHEN enb_1_1_1 = '1' ELSE
      Upsample3_bypass_reg;

  startOut <= Upsample1_bypassout;

  endOut <= Upsample2_bypassout;

  validOut <= Upsample3_bypassout;

END rtl;

