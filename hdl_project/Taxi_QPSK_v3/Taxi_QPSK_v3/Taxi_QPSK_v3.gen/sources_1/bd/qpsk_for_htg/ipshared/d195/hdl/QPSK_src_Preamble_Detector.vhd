-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_src_Preamble_Detector.vhd
-- Created: 2025-09-17 13:27:52
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_src_Preamble_Detector
-- Source Path: hdlcoder_QPSKTxRx_RFSoC/QPSK/QPSK Rx/Frequency and Time Synchronizer/Preamble Detector
-- Hierarchy Level: 3
-- Model version: 9.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.QPSK_src_QPSK_pkg.ALL;

ENTITY QPSK_src_Preamble_Detector IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_4_0                         :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        validIn                           :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        syncPulse                         :   OUT   std_logic;
        validOut                          :   OUT   std_logic;
        rx_nSynced                        :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
        );
END QPSK_src_Preamble_Detector;


ARCHITECTURE rtl OF QPSK_src_Preamble_Detector IS

  -- Component Declarations
  COMPONENT QPSK_src_Correlator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validIn                         :   IN    std_logic;
          dataOut                         :   OUT   std_logic_vector(32 DOWNTO 0);  -- sfix33_En26
          thresholdExceeded               :   OUT   std_logic;
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT QPSK_src_Peak_Search
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          corr                            :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En26
          thresholdExceeded               :   IN    std_logic;
          validIn                         :   IN    std_logic;
          timingOffset                    :   OUT   std_logic_vector(10 DOWNTO 0);  -- ufix11
          timingOffsetValid               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT QPSK_src_Timing_Adjust
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          timingOffset                    :   IN    std_logic_vector(10 DOWNTO 0);  -- ufix11
          timingOffsetValid               :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validOut                        :   OUT   std_logic;
          SyncPulse                       :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : QPSK_src_Correlator
    USE ENTITY work.QPSK_src_Correlator(rtl);

  FOR ALL : QPSK_src_Peak_Search
    USE ENTITY work.QPSK_src_Peak_Search(rtl);

  FOR ALL : QPSK_src_Timing_Adjust
    USE ENTITY work.QPSK_src_Timing_Adjust(rtl);

  -- Signals
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL corrOut                          : std_logic_vector(32 DOWNTO 0);  -- ufix33
  SIGNAL corrThreshExceeded               : std_logic;
  SIGNAL Correlator_validOut              : std_logic;
  SIGNAL Peak_Search_timingOffset         : std_logic_vector(10 DOWNTO 0);  -- ufix11
  SIGNAL timingOffsetValid                : std_logic;
  SIGNAL Delay_reg_re                     : vector_of_signed16(0 TO 19);  -- sfix16_En14 [20]
  SIGNAL Delay_reg_im                     : vector_of_signed16(0 TO 19);  -- sfix16_En14 [20]
  SIGNAL Delay_out1_re                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay_out1_im                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay6_reg_re                    : vector_of_signed16(0 TO 13);  -- sfix16_En14 [14]
  SIGNAL Delay6_reg_im                    : vector_of_signed16(0 TO 13);  -- sfix16_En14 [14]
  SIGNAL Delay6_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay6_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay9_reg_re                    : vector_of_signed16(0 TO 1132);  -- sfix16_En14 [1133]
  SIGNAL Delay9_reg_im                    : vector_of_signed16(0 TO 1132);  -- sfix16_En14 [1133]
  SIGNAL Delay9_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay9_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay7_reg                       : std_logic_vector(19 DOWNTO 0);  -- ufix1 [20]
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL Delay8_reg                       : std_logic_vector(13 DOWNTO 0);  -- ufix1 [14]
  SIGNAL Delay8_out1                      : std_logic;
  SIGNAL Delay10_reg                      : std_logic_vector(1132 DOWNTO 0);  -- ufix1 [1133]
  SIGNAL Delay10_out1                     : std_logic;
  SIGNAL synchronizedData_re              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL synchronizedData_im              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL synchronizedValid                : std_logic;
  SIGNAL synchronizedPulse                : std_logic;
  SIGNAL synchronizedData_re_signed       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL synchronizedData_im_signed       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay3_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay3_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL count_step                       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL HDL_Counter_out1                 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL count                            : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL count_1                          : unsigned(31 DOWNTO 0);  -- uint32

BEGIN
  u_Correlator : QPSK_src_Correlator
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              dataIn_re => std_logic_vector(Delay1_out1_re),  -- sfix16_En14
              dataIn_im => std_logic_vector(Delay1_out1_im),  -- sfix16_En14
              validIn => Delay2_out1,
              dataOut => corrOut,  -- sfix33_En26
              thresholdExceeded => corrThreshExceeded,
              validOut => Correlator_validOut
              );

  u_Peak_Search : QPSK_src_Peak_Search
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              corr => corrOut,  -- sfix33_En26
              thresholdExceeded => corrThreshExceeded,
              validIn => Correlator_validOut,
              timingOffset => Peak_Search_timingOffset,  -- ufix11
              timingOffsetValid => timingOffsetValid
              );

  u_Timing_Adjust : QPSK_src_Timing_Adjust
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              timingOffset => Peak_Search_timingOffset,  -- ufix11
              timingOffsetValid => timingOffsetValid,
              dataIn_re => std_logic_vector(Delay9_out1_re),  -- sfix16_En14
              dataIn_im => std_logic_vector(Delay9_out1_im),  -- sfix16_En14
              validIn => Delay10_out1,
              dataOut_re => synchronizedData_re,  -- sfix16_En14
              dataOut_im => synchronizedData_im,  -- sfix16_En14
              validOut => synchronizedValid,
              SyncPulse => synchronizedPulse
              );

  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_re <= to_signed(16#0000#, 16);
        Delay1_out1_im <= to_signed(16#0000#, 16);
      ELSIF enb_1_4_0 = '1' THEN
        Delay1_out1_re <= dataIn_re_signed;
        Delay1_out1_im <= dataIn_im_signed;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= '0';
      ELSIF enb_1_4_0 = '1' THEN
        Delay2_out1 <= validIn;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_reg_re <= (OTHERS => to_signed(16#0000#, 16));
        Delay_reg_im <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_4_0 = '1' THEN
        Delay_reg_im(0) <= Delay1_out1_im;
        Delay_reg_im(1 TO 19) <= Delay_reg_im(0 TO 18);
        Delay_reg_re(0) <= Delay1_out1_re;
        Delay_reg_re(1 TO 19) <= Delay_reg_re(0 TO 18);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1_re <= Delay_reg_re(19);
  Delay_out1_im <= Delay_reg_im(19);

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_reg_re <= (OTHERS => to_signed(16#0000#, 16));
        Delay6_reg_im <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_4_0 = '1' THEN
        Delay6_reg_im(0) <= Delay_out1_im;
        Delay6_reg_im(1 TO 13) <= Delay6_reg_im(0 TO 12);
        Delay6_reg_re(0) <= Delay_out1_re;
        Delay6_reg_re(1 TO 13) <= Delay6_reg_re(0 TO 12);
      END IF;
    END IF;
  END PROCESS Delay6_process;

  Delay6_out1_re <= Delay6_reg_re(13);
  Delay6_out1_im <= Delay6_reg_im(13);

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_reg_re <= (OTHERS => to_signed(16#0000#, 16));
        Delay9_reg_im <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_4_0 = '1' THEN
        Delay9_reg_im(0) <= Delay6_out1_im;
        Delay9_reg_im(1 TO 1132) <= Delay9_reg_im(0 TO 1131);
        Delay9_reg_re(0) <= Delay6_out1_re;
        Delay9_reg_re(1 TO 1132) <= Delay9_reg_re(0 TO 1131);
      END IF;
    END IF;
  END PROCESS Delay9_process;

  Delay9_out1_re <= Delay9_reg_re(1132);
  Delay9_out1_im <= Delay9_reg_im(1132);

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_reg <= (OTHERS => '0');
      ELSIF enb_1_4_0 = '1' THEN
        Delay7_reg(0) <= Delay2_out1;
        Delay7_reg(19 DOWNTO 1) <= Delay7_reg(18 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay7_process;

  Delay7_out1 <= Delay7_reg(19);

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_reg <= (OTHERS => '0');
      ELSIF enb_1_4_0 = '1' THEN
        Delay8_reg(0) <= Delay7_out1;
        Delay8_reg(13 DOWNTO 1) <= Delay8_reg(12 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay8_process;

  Delay8_out1 <= Delay8_reg(13);

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_reg <= (OTHERS => '0');
      ELSIF enb_1_4_0 = '1' THEN
        Delay10_reg(0) <= Delay8_out1;
        Delay10_reg(1132 DOWNTO 1) <= Delay10_reg(1131 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay10_process;

  Delay10_out1 <= Delay10_reg(1132);

  synchronizedData_re_signed <= signed(synchronizedData_re);

  synchronizedData_im_signed <= signed(synchronizedData_im);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1_re <= to_signed(16#0000#, 16);
        Delay3_out1_im <= to_signed(16#0000#, 16);
      ELSIF enb_1_4_0 = '1' THEN
        Delay3_out1_re <= synchronizedData_re_signed;
        Delay3_out1_im <= synchronizedData_im_signed;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  dataOut_re <= std_logic_vector(Delay3_out1_re);

  dataOut_im <= std_logic_vector(Delay3_out1_im);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= '0';
      ELSIF enb_1_4_0 = '1' THEN
        Delay4_out1 <= synchronizedPulse;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= '0';
      ELSIF enb_1_4_0 = '1' THEN
        Delay5_out1 <= synchronizedValid;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  count_step <= to_unsigned(1, 32);

  count <= HDL_Counter_out1 + count_step;

  
  count_1 <= HDL_Counter_out1 WHEN Delay4_out1 = '0' ELSE
      count;

  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HDL_Counter_out1 <= to_unsigned(0, 32);
      ELSIF enb_1_4_0 = '1' THEN
        HDL_Counter_out1 <= count_1;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  rx_nSynced <= std_logic_vector(HDL_Counter_out1);

  syncPulse <= Delay4_out1;

  validOut <= Delay5_out1;

END rtl;

