-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_src_QPSK_Tx.vhd
-- Created: 2025-09-17 13:27:52
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_src_QPSK_Tx
-- Source Path: hdlcoder_QPSKTxRx_RFSoC/QPSK/QPSK Tx
-- Hierarchy Level: 1
-- Model version: 9.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY QPSK_src_QPSK_Tx IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn                            :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        validIn                           :   IN    std_logic;
        TxBus_data_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        TxBus_data_im                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        TxBus_valid                       :   OUT   std_logic;
        readyIn                           :   OUT   std_logic
        );
END QPSK_src_QPSK_Tx;


ARCHITECTURE rtl OF QPSK_src_QPSK_Tx IS

  -- Component Declarations
  COMPONENT QPSK_src_Bit_Packetizer
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn                          :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          validIn                         :   IN    std_logic;
          bitsOut                         :   OUT   std_logic;
          dataStart                       :   OUT   std_logic;
          dataEnd                         :   OUT   std_logic;
          bitsValid                       :   OUT   std_logic;
          dataReady                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT QPSK_src_HDL_Data_Scrambler
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn                          :   IN    std_logic;
          startIn                         :   IN    std_logic;
          endIn                           :   IN    std_logic;
          validIn                         :   IN    std_logic;
          dataOut                         :   OUT   std_logic;
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT QPSK_src_QPSK_Modulator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn                          :   IN    std_logic;
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT QPSK_src_RRC_Transmit_Filter
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT QPSK_src_Output_Switch
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT QPSK_src_To_Data_Bus_block
    PORT( data_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid                           :   IN    std_logic;
          bus_data_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          bus_data_im                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          bus_valid                       :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : QPSK_src_Bit_Packetizer
    USE ENTITY work.QPSK_src_Bit_Packetizer(rtl);

  FOR ALL : QPSK_src_HDL_Data_Scrambler
    USE ENTITY work.QPSK_src_HDL_Data_Scrambler(rtl);

  FOR ALL : QPSK_src_QPSK_Modulator
    USE ENTITY work.QPSK_src_QPSK_Modulator(rtl);

  FOR ALL : QPSK_src_RRC_Transmit_Filter
    USE ENTITY work.QPSK_src_RRC_Transmit_Filter(rtl);

  FOR ALL : QPSK_src_Output_Switch
    USE ENTITY work.QPSK_src_Output_Switch(rtl);

  FOR ALL : QPSK_src_To_Data_Bus_block
    USE ENTITY work.QPSK_src_To_Data_Bus_block(rtl);

  -- Signals
  SIGNAL Bit_Packetizer_bitsOut           : std_logic;
  SIGNAL Bit_Packetizer_dataStart         : std_logic;
  SIGNAL Bit_Packetizer_dataEnd           : std_logic;
  SIGNAL Bit_Packetizer_bitsValid         : std_logic;
  SIGNAL Bit_Packetizer_dataReady         : std_logic;
  SIGNAL HDL_Data_Scrambler_dataOut       : std_logic;
  SIGNAL HDL_Data_Scrambler_validOut      : std_logic;
  SIGNAL QPSKConstellationPoints_re       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL QPSKConstellationPoints_im       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL QPSKConstellationValid           : std_logic;
  SIGNAL RRC_Transmit_Filter_dataOut_re   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL RRC_Transmit_Filter_dataOut_im   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL RRC_Transmit_Filter_validOut     : std_logic;
  SIGNAL Output_Switch_dataOut_re         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Output_Switch_dataOut_im         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Output_Switch_validOut           : std_logic;
  SIGNAL To_Data_Bus_bus_data_re          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL To_Data_Bus_bus_data_im          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL To_Data_Bus_bus_valid            : std_logic;

BEGIN
  u_Bit_Packetizer : QPSK_src_Bit_Packetizer
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn => dataIn,  -- uint32
              validIn => validIn,
              bitsOut => Bit_Packetizer_bitsOut,
              dataStart => Bit_Packetizer_dataStart,
              dataEnd => Bit_Packetizer_dataEnd,
              bitsValid => Bit_Packetizer_bitsValid,
              dataReady => Bit_Packetizer_dataReady
              );

  u_HDL_Data_Scrambler : QPSK_src_HDL_Data_Scrambler
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn => Bit_Packetizer_bitsOut,
              startIn => Bit_Packetizer_dataStart,
              endIn => Bit_Packetizer_dataEnd,
              validIn => Bit_Packetizer_bitsValid,
              dataOut => HDL_Data_Scrambler_dataOut,
              validOut => HDL_Data_Scrambler_validOut
              );

  u_QPSK_Modulator : QPSK_src_QPSK_Modulator
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn => HDL_Data_Scrambler_dataOut,
              validIn => HDL_Data_Scrambler_validOut,
              dataOut_re => QPSKConstellationPoints_re,  -- sfix16_En15
              dataOut_im => QPSKConstellationPoints_im,  -- sfix16_En15
              validOut => QPSKConstellationValid
              );

  u_RRC_Transmit_Filter : QPSK_src_RRC_Transmit_Filter
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn_re => QPSKConstellationPoints_re,  -- sfix16_En15
              dataIn_im => QPSKConstellationPoints_im,  -- sfix16_En15
              validIn => QPSKConstellationValid,
              dataOut_re => RRC_Transmit_Filter_dataOut_re,  -- sfix16_En14
              dataOut_im => RRC_Transmit_Filter_dataOut_im,  -- sfix16_En14
              validOut => RRC_Transmit_Filter_validOut
              );

  u_Output_Switch : QPSK_src_Output_Switch
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn_re => RRC_Transmit_Filter_dataOut_re,  -- sfix16_En14
              dataIn_im => RRC_Transmit_Filter_dataOut_im,  -- sfix16_En14
              validIn => RRC_Transmit_Filter_validOut,
              dataOut_re => Output_Switch_dataOut_re,  -- sfix16_En14
              dataOut_im => Output_Switch_dataOut_im,  -- sfix16_En14
              validOut => Output_Switch_validOut
              );

  u_To_Data_Bus : QPSK_src_To_Data_Bus_block
    PORT MAP( data_re => Output_Switch_dataOut_re,  -- sfix16_En14
              data_im => Output_Switch_dataOut_im,  -- sfix16_En14
              valid => Output_Switch_validOut,
              bus_data_re => To_Data_Bus_bus_data_re,  -- sfix16_En14
              bus_data_im => To_Data_Bus_bus_data_im,  -- sfix16_En14
              bus_valid => To_Data_Bus_bus_valid
              );


  TxBus_data_re <= To_Data_Bus_bus_data_re;

  TxBus_data_im <= To_Data_Bus_bus_data_im;

  TxBus_valid <= To_Data_Bus_bus_valid;

  readyIn <= Bit_Packetizer_dataReady;

END rtl;

