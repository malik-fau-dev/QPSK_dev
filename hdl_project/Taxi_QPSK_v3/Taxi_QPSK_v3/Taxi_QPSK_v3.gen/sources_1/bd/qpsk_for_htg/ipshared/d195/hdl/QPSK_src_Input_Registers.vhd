-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_src_Input_Registers.vhd
-- Created: 2025-09-17 13:27:52
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_src_Input_Registers
-- Source Path: hdlcoder_QPSKTxRx_RFSoC/QPSK/Input Registers
-- Hierarchy Level: 1
-- Model version: 9.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY QPSK_src_Input_Registers IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_4_0                         :   IN    std_logic;
        enb_1_4_1                         :   IN    std_logic;
        regIn_tx_enable                   :   IN    std_logic;
        regIn_rx_reset_cs                 :   IN    std_logic;
        regIn_rx_src_sel                  :   IN    std_logic;  -- ufix1
        regIn_capture_start               :   IN    std_logic;
        regIn_capture_length              :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        regIn_capture_src_sel             :   IN    std_logic;  -- ufix1
        regIn_tx_output_gain              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        regIn_rx_input_gain               :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        regIn_capture_mode                :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        rx_input_gain                     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        capture_mode                      :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        tx_enable                         :   OUT   std_logic;
        rx_resetCS                        :   OUT   std_logic;
        rx_src_sel                        :   OUT   std_logic;  -- ufix1
        capture_start                     :   OUT   std_logic;
        capture_length                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        capture_src_sel                   :   OUT   std_logic;  -- ufix1
        tx_output_gain                    :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En15
        );
END QPSK_src_Input_Registers;


ARCHITECTURE rtl OF QPSK_src_Input_Registers IS

  -- Component Declarations
  COMPONENT QPSK_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT QPSK_src_Detect_Rise_Positive2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : QPSK_src_Detect_Rise_Positive
    USE ENTITY work.QPSK_src_Detect_Rise_Positive(rtl);

  FOR ALL : QPSK_src_Detect_Rise_Positive2
    USE ENTITY work.QPSK_src_Detect_Rise_Positive2(rtl);

  -- Signals
  SIGNAL rx_input_gain_1                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL rx_input_gain_2                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay1_out1                      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL capture_mode_1                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL capture_mode_2                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Delay4_out1                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tx_enable_1                      : std_logic;
  SIGNAL tx_enable_2                      : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL rx_reset_cs                      : std_logic;
  SIGNAL rx_reset_cs_1                    : std_logic;
  SIGNAL Rate_Transition_out1             : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Detect_Rise_Positive_Y           : std_logic;
  SIGNAL rx_src_sel_1                     : std_logic;  -- ufix1
  SIGNAL rx_src_sel_2                     : std_logic;  -- ufix1
  SIGNAL Delay7_out1                      : std_logic;  -- ufix1
  SIGNAL capture_start_1                  : std_logic;
  SIGNAL capture_start_2                  : std_logic;
  SIGNAL Delay8_out1                      : std_logic;
  SIGNAL Detect_Rise_Positive2_Y          : std_logic;
  SIGNAL capture_length_1                 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL capture_length_2                 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay9_out1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL capture_src_sel_1                : std_logic;  -- ufix1
  SIGNAL capture_src_sel_2                : std_logic;  -- ufix1
  SIGNAL Delay10_out1                     : std_logic;  -- ufix1
  SIGNAL tx_output_gain_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL tx_output_gain_2                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay2_out1                      : signed(17 DOWNTO 0);  -- sfix18_En15

BEGIN
  u_Detect_Rise_Positive : QPSK_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              U => Delay_out1,
              Y => Detect_Rise_Positive_Y
              );

  u_Detect_Rise_Positive2 : QPSK_src_Detect_Rise_Positive2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              U => Delay8_out1,
              Y => Detect_Rise_Positive2_Y
              );

  rx_input_gain_1 <= signed(regIn_rx_input_gain);

  rx_input_gain_2 <= rx_input_gain_1;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay1_out1 <= rx_input_gain_2;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  rx_input_gain <= std_logic_vector(Delay1_out1);

  capture_mode_1 <= unsigned(regIn_capture_mode);

  capture_mode_2 <= capture_mode_1;

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        Delay4_out1 <= capture_mode_2;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  capture_mode <= std_logic_vector(Delay4_out1);

  tx_enable_1 <= regIn_tx_enable;

  tx_enable_2 <= tx_enable_1;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1 <= tx_enable_2;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  tx_enable <= Delay3_out1;

  rx_reset_cs <= regIn_rx_reset_cs;

  rx_reset_cs_1 <= rx_reset_cs;

  Rate_Transition_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Rate_Transition_out1 <= '0';
      ELSIF enb_1_4_1 = '1' THEN
        Rate_Transition_out1 <= rx_reset_cs_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition_output_process;


  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1 <= '0';
      ELSIF enb_1_4_0 = '1' THEN
        Delay_out1 <= Rate_Transition_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  rx_resetCS <= Detect_Rise_Positive_Y;

  rx_src_sel_1 <= regIn_rx_src_sel;

  rx_src_sel_2 <= rx_src_sel_1;

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay7_out1 <= rx_src_sel_2;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  rx_src_sel <= Delay7_out1;

  capture_start_1 <= regIn_capture_start;

  capture_start_2 <= capture_start_1;

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay8_out1 <= capture_start_2;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  capture_start <= Detect_Rise_Positive2_Y;

  capture_length_1 <= unsigned(regIn_capture_length);

  capture_length_2 <= capture_length_1;

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay9_out1 <= capture_length_2;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  capture_length <= std_logic_vector(Delay9_out1);

  capture_src_sel_1 <= regIn_capture_src_sel;

  capture_src_sel_2 <= capture_src_sel_1;

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay10_out1 <= capture_src_sel_2;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  capture_src_sel <= Delay10_out1;

  tx_output_gain_1 <= signed(regIn_tx_output_gain);

  tx_output_gain_2 <= tx_output_gain_1;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay2_out1 <= tx_output_gain_2;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  tx_output_gain <= std_logic_vector(Delay2_out1);

END rtl;

