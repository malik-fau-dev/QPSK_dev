-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_src_Free_Running_Capture.vhd
-- Created: 2025-09-17 13:27:53
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_src_Free_Running_Capture
-- Source Path: hdlcoder_QPSKTxRx_RFSoC/QPSK/To DMA/Free Running Capture
-- Hierarchy Level: 2
-- Model version: 9.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY QPSK_src_Free_Running_Capture IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enable                            :   IN    std_logic;
        dataBusIn_data                    :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        dataBusIn_valid                   :   IN    std_logic;
        streamReadyOut                    :   IN    std_logic;
        capture_length_active             :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        streamBusOut_data                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        streamBusOut_valid                :   OUT   std_logic;
        streamBusOut_last                 :   OUT   std_logic
        );
END QPSK_src_Free_Running_Capture;


ARCHITECTURE rtl OF QPSK_src_Free_Running_Capture IS

  -- Component Declarations
  COMPONENT QPSK_src_To_Stream_Bus_block
    PORT( data                            :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          valid                           :   IN    std_logic;
          last                            :   IN    std_logic;
          bus_data                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          bus_valid                       :   OUT   std_logic;
          bus_last                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : QPSK_src_To_Stream_Bus_block
    USE ENTITY work.QPSK_src_To_Stream_Bus_block(rtl);

  -- Signals
  SIGNAL data                             : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL data_1                           : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL valid                            : std_logic;
  SIGNAL valid_1                          : std_logic;
  SIGNAL AND1_out1                        : std_logic;
  SIGNAL count_step                       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL count_reset                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL length_out                       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Decrement_Stored_Integer_out1    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay_out1                       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL TLAST_Counter_out1               : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL count                            : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL count_1                          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL AND2_out1                        : std_logic;
  SIGNAL count_2                          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Relational_Operator_out1         : std_logic;
  SIGNAL To_Stream_Bus_bus_data           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL To_Stream_Bus_bus_valid          : std_logic;
  SIGNAL To_Stream_Bus_bus_last           : std_logic;

BEGIN
  u_To_Stream_Bus : QPSK_src_To_Stream_Bus_block
    PORT MAP( data => std_logic_vector(data_1),  -- uint32
              valid => AND1_out1,
              last => AND2_out1,
              bus_data => To_Stream_Bus_bus_data,  -- uint32
              bus_valid => To_Stream_Bus_bus_valid,
              bus_last => To_Stream_Bus_bus_last
              );

  data <= unsigned(dataBusIn_data);

  data_1 <= data;

  valid <= dataBusIn_valid;

  valid_1 <= valid;

  AND1_out1 <= streamReadyOut AND (enable AND valid_1);

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  count_step <= to_unsigned(1, 32);

  count_reset <= to_unsigned(0, 32);

  length_out <= unsigned(capture_length_active);

  Decrement_Stored_Integer_out1 <= length_out - to_unsigned(1, 32);

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay_out1 <= Decrement_Stored_Integer_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  count <= TLAST_Counter_out1 + count_step;

  
  count_1 <= TLAST_Counter_out1 WHEN AND1_out1 = '0' ELSE
      count;

  
  count_2 <= count_1 WHEN AND2_out1 = '0' ELSE
      count_reset;

  TLAST_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        TLAST_Counter_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        TLAST_Counter_out1 <= count_2;
      END IF;
    END IF;
  END PROCESS TLAST_Counter_process;


  
  Relational_Operator_out1 <= '1' WHEN TLAST_Counter_out1 = Delay_out1 ELSE
      '0';

  AND2_out1 <= Relational_Operator_out1 AND AND1_out1;

  streamBusOut_data <= To_Stream_Bus_bus_data;

  streamBusOut_valid <= To_Stream_Bus_bus_valid;

  streamBusOut_last <= To_Stream_Bus_bus_last;

END rtl;

