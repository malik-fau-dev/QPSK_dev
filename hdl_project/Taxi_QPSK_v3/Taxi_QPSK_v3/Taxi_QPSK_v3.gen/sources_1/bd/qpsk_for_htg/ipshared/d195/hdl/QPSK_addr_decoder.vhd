-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_addr_decoder.vhd
-- Created: 2025-09-17 13:28:21
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_addr_decoder
-- Source Path: QPSK/QPSK_axi_lite/QPSK_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.QPSK_pkg.ALL;

ENTITY QPSK_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_write                        :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        addr_read                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_regOut_rx_nSynced            :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_regOut_rx_normCoarseFreqEst  :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En21
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_regIn_tx_enable             :   OUT   std_logic;  -- ufix1
        write_regIn_rx_reset_cs           :   OUT   std_logic;  -- ufix1
        write_regIn_rx_src_sel            :   OUT   std_logic;  -- ufix1
        write_regIn_capture_start         :   OUT   std_logic;  -- ufix1
        write_regIn_capture_length        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_regIn_capture_src_sel       :   OUT   std_logic;  -- ufix1
        write_regIn_tx_output_gain        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        write_regIn_rx_input_gain         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        write_regIn_capture_mode          :   OUT   std_logic_vector(1 DOWNTO 0)  -- ufix2
        );
END QPSK_addr_decoder;


ARCHITECTURE rtl OF QPSK_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_read_unsigned               : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL address_select_level1            : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL addr_write_unsigned              : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_axi_enable_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable_1_1           : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL data_reg_axi_enable_1_1          : std_logic;  -- ufix1
  SIGNAL data_slice_axi_enable_1          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_regIn_tx_enable_1_1   : std_logic;  -- ufix1
  SIGNAL reg_enb_regIn_tx_enable_1_1      : std_logic;  -- ufix1
  SIGNAL data_in_regIn_tx_enable          : std_logic;  -- ufix1
  SIGNAL data_reg_regIn_tx_enable_1_1     : std_logic;  -- ufix1
  SIGNAL data_slice_regIn_tx_enable_1     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_regIn_rx_reset_cs_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_regIn_rx_reset_cs_1_1    : std_logic;  -- ufix1
  SIGNAL data_in_regIn_rx_reset_cs        : std_logic;  -- ufix1
  SIGNAL data_reg_regIn_rx_reset_cs_1_1   : std_logic;  -- ufix1
  SIGNAL data_slice_regIn_rx_reset_cs_1   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_regIn_rx_src_sel_1_1  : std_logic;  -- ufix1
  SIGNAL reg_enb_regIn_rx_src_sel_1_1     : std_logic;  -- ufix1
  SIGNAL data_in_regIn_rx_src_sel         : std_logic;  -- ufix1
  SIGNAL data_reg_regIn_rx_src_sel_1_1    : std_logic;  -- ufix1
  SIGNAL data_slice_regIn_rx_src_sel_1    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_regIn_capture_start_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_regIn_capture_start_1_1  : std_logic;  -- ufix1
  SIGNAL data_in_regIn_capture_start      : std_logic;  -- ufix1
  SIGNAL data_reg_regIn_capture_start_1_1 : std_logic;  -- ufix1
  SIGNAL data_slice_regIn_capture_start_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_regIn_capture_length_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_regIn_capture_length_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_regIn_capture_length_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_regIn_capture_src_sel_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_regIn_capture_src_sel_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_regIn_capture_src_sel    : std_logic;  -- ufix1
  SIGNAL data_reg_regIn_capture_src_sel_1_1 : std_logic;  -- ufix1
  SIGNAL data_slice_regIn_capture_src_sel_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_regIn_tx_output_gain_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_regIn_tx_output_gain_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_regIn_tx_output_gain     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL data_reg_regIn_tx_output_gain_1_1 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL data_slice_regIn_tx_output_gain_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_regIn_rx_input_gain_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_regIn_rx_input_gain_1_1  : std_logic;  -- ufix1
  SIGNAL data_in_regIn_rx_input_gain      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL data_reg_regIn_rx_input_gain_1_1 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL data_slice_regIn_rx_input_gain_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_regIn_capture_mode_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_regIn_capture_mode_1_1   : std_logic;  -- ufix1
  SIGNAL data_in_regIn_capture_mode       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL data_reg_regIn_capture_mode_1_1  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL data_slice_regIn_capture_mode_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_regOut_rx_nSynced_unsigned  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_regOut_rx_nSynced       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_regOut_rx_normCoarseFreqEst_signed : signed(20 DOWNTO 0);  -- sfix21_En21
  SIGNAL read_reg_regOut_rx_normCoarseFreqEst : signed(20 DOWNTO 0);  -- sfix21_En21
  SIGNAL data_slice_regOut_rx_normCoarseFreqEst_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL mux_out0_level1                  : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  addr_read_unsigned <= unsigned(addr_read);

  address_select_level1 <= addr_read_unsigned(6 DOWNTO 0);

  addr_write_unsigned <= unsigned(addr_write);

  
  decode_sel_axi_enable_1_1 <= '1' WHEN addr_write_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable_1_1 <= decode_sel_axi_enable_1_1 AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  const_1 <= '1';

  enb <= const_1;

  reg_axi_enable_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_enable_1_1 <= '1';
      ELSIF enb = '1' AND reg_enb_axi_enable_1_1 = '1' THEN
        data_reg_axi_enable_1_1 <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_1_1_process;


  data_slice_axi_enable_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & data_reg_axi_enable_1_1;

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  reg_ip_timestamp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_ip_timestamp <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_sel_regIn_tx_enable_1_1 <= '1' WHEN addr_write_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_regIn_tx_enable_1_1 <= decode_sel_regIn_tx_enable_1_1 AND wr_enb;

  data_in_regIn_tx_enable <= data_write_unsigned(0);

  reg_regIn_tx_enable_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_regIn_tx_enable_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_regIn_tx_enable_1_1 = '1' THEN
        data_reg_regIn_tx_enable_1_1 <= data_in_regIn_tx_enable;
      END IF;
    END IF;
  END PROCESS reg_regIn_tx_enable_1_1_process;


  data_slice_regIn_tx_enable_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & data_reg_regIn_tx_enable_1_1;

  
  decode_sel_regIn_rx_reset_cs_1_1 <= '1' WHEN addr_write_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  reg_enb_regIn_rx_reset_cs_1_1 <= decode_sel_regIn_rx_reset_cs_1_1 AND wr_enb;

  data_in_regIn_rx_reset_cs <= data_write_unsigned(0);

  reg_regIn_rx_reset_cs_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_regIn_rx_reset_cs_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_regIn_rx_reset_cs_1_1 = '1' THEN
        data_reg_regIn_rx_reset_cs_1_1 <= data_in_regIn_rx_reset_cs;
      END IF;
    END IF;
  END PROCESS reg_regIn_rx_reset_cs_1_1_process;


  data_slice_regIn_rx_reset_cs_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & data_reg_regIn_rx_reset_cs_1_1;

  
  decode_sel_regIn_rx_src_sel_1_1 <= '1' WHEN addr_write_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  reg_enb_regIn_rx_src_sel_1_1 <= decode_sel_regIn_rx_src_sel_1_1 AND wr_enb;

  data_in_regIn_rx_src_sel <= data_write_unsigned(0);

  reg_regIn_rx_src_sel_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_regIn_rx_src_sel_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_regIn_rx_src_sel_1_1 = '1' THEN
        data_reg_regIn_rx_src_sel_1_1 <= data_in_regIn_rx_src_sel;
      END IF;
    END IF;
  END PROCESS reg_regIn_rx_src_sel_1_1_process;


  data_slice_regIn_rx_src_sel_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & data_reg_regIn_rx_src_sel_1_1;

  
  decode_sel_regIn_capture_start_1_1 <= '1' WHEN addr_write_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  reg_enb_regIn_capture_start_1_1 <= decode_sel_regIn_capture_start_1_1 AND wr_enb;

  data_in_regIn_capture_start <= data_write_unsigned(0);

  reg_regIn_capture_start_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_regIn_capture_start_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_regIn_capture_start_1_1 = '1' THEN
        data_reg_regIn_capture_start_1_1 <= data_in_regIn_capture_start;
      END IF;
    END IF;
  END PROCESS reg_regIn_capture_start_1_1_process;


  data_slice_regIn_capture_start_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & data_reg_regIn_capture_start_1_1;

  
  decode_sel_regIn_capture_length_1_1 <= '1' WHEN addr_write_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  reg_enb_regIn_capture_length_1_1 <= decode_sel_regIn_capture_length_1_1 AND wr_enb;

  reg_regIn_capture_length_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_regIn_capture_length_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_regIn_capture_length_1_1 = '1' THEN
        data_reg_regIn_capture_length_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_regIn_capture_length_1_1_process;


  
  decode_sel_regIn_capture_src_sel_1_1 <= '1' WHEN addr_write_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  reg_enb_regIn_capture_src_sel_1_1 <= decode_sel_regIn_capture_src_sel_1_1 AND wr_enb;

  data_in_regIn_capture_src_sel <= data_write_unsigned(0);

  reg_regIn_capture_src_sel_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_regIn_capture_src_sel_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_regIn_capture_src_sel_1_1 = '1' THEN
        data_reg_regIn_capture_src_sel_1_1 <= data_in_regIn_capture_src_sel;
      END IF;
    END IF;
  END PROCESS reg_regIn_capture_src_sel_1_1_process;


  data_slice_regIn_capture_src_sel_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & data_reg_regIn_capture_src_sel_1_1;

  
  decode_sel_regIn_tx_output_gain_1_1 <= '1' WHEN addr_write_unsigned = to_unsigned(16#0046#, 14) ELSE
      '0';

  reg_enb_regIn_tx_output_gain_1_1 <= decode_sel_regIn_tx_output_gain_1_1 AND wr_enb;

  data_in_regIn_tx_output_gain <= signed(data_write_unsigned(17 DOWNTO 0));

  reg_regIn_tx_output_gain_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_regIn_tx_output_gain_1_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' AND reg_enb_regIn_tx_output_gain_1_1 = '1' THEN
        data_reg_regIn_tx_output_gain_1_1 <= data_in_regIn_tx_output_gain;
      END IF;
    END IF;
  END PROCESS reg_regIn_tx_output_gain_1_1_process;


  data_slice_regIn_tx_output_gain_1 <= unsigned(resize(data_reg_regIn_tx_output_gain_1_1, 32));

  
  decode_sel_regIn_rx_input_gain_1_1 <= '1' WHEN addr_write_unsigned = to_unsigned(16#0047#, 14) ELSE
      '0';

  reg_enb_regIn_rx_input_gain_1_1 <= decode_sel_regIn_rx_input_gain_1_1 AND wr_enb;

  data_in_regIn_rx_input_gain <= signed(data_write_unsigned(17 DOWNTO 0));

  reg_regIn_rx_input_gain_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_regIn_rx_input_gain_1_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' AND reg_enb_regIn_rx_input_gain_1_1 = '1' THEN
        data_reg_regIn_rx_input_gain_1_1 <= data_in_regIn_rx_input_gain;
      END IF;
    END IF;
  END PROCESS reg_regIn_rx_input_gain_1_1_process;


  data_slice_regIn_rx_input_gain_1 <= unsigned(resize(data_reg_regIn_rx_input_gain_1_1, 32));

  
  decode_sel_regIn_capture_mode_1_1 <= '1' WHEN addr_write_unsigned = to_unsigned(16#0048#, 14) ELSE
      '0';

  reg_enb_regIn_capture_mode_1_1 <= decode_sel_regIn_capture_mode_1_1 AND wr_enb;

  data_in_regIn_capture_mode <= data_write_unsigned(1 DOWNTO 0);

  reg_regIn_capture_mode_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_regIn_capture_mode_1_1 <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' AND reg_enb_regIn_capture_mode_1_1 = '1' THEN
        data_reg_regIn_capture_mode_1_1 <= data_in_regIn_capture_mode;
      END IF;
    END IF;
  END PROCESS reg_regIn_capture_mode_1_1_process;


  data_slice_regIn_capture_mode_1 <= resize(data_reg_regIn_capture_mode_1_1, 32);

  read_regOut_rx_nSynced_unsigned <= unsigned(read_regOut_rx_nSynced);

  reg_regOut_rx_nSynced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_regOut_rx_nSynced <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_regOut_rx_nSynced <= read_regOut_rx_nSynced_unsigned;
      END IF;
    END IF;
  END PROCESS reg_regOut_rx_nSynced_process;


  read_regOut_rx_normCoarseFreqEst_signed <= signed(read_regOut_rx_normCoarseFreqEst);

  reg_regOut_rx_normCoarseFreqEst_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_regOut_rx_normCoarseFreqEst <= to_signed(16#000000#, 21);
      ELSIF enb = '1' THEN
        read_reg_regOut_rx_normCoarseFreqEst <= read_regOut_rx_normCoarseFreqEst_signed;
      END IF;
    END IF;
  END PROCESS reg_regOut_rx_normCoarseFreqEst_process;


  data_slice_regOut_rx_normCoarseFreqEst_1 <= unsigned(resize(read_reg_regOut_rx_normCoarseFreqEst, 32));

  const_0 <= to_unsigned(0, 32);

  mux0_level1_output : PROCESS (address_select_level1, const_0, data_reg_regIn_capture_length_1_1,
       data_slice_axi_enable_1, data_slice_regIn_capture_mode_1,
       data_slice_regIn_capture_src_sel_1, data_slice_regIn_capture_start_1,
       data_slice_regIn_rx_input_gain_1, data_slice_regIn_rx_reset_cs_1,
       data_slice_regIn_rx_src_sel_1, data_slice_regIn_tx_enable_1,
       data_slice_regIn_tx_output_gain_1,
       data_slice_regOut_rx_normCoarseFreqEst_1, read_reg_ip_timestamp,
       read_reg_regOut_rx_nSynced)
  BEGIN
    CASE address_select_level1 IS
      WHEN "0000001" =>
        mux_out0_level1 <= data_slice_axi_enable_1;
      WHEN "0000010" =>
        mux_out0_level1 <= read_reg_ip_timestamp;
      WHEN "1000000" =>
        mux_out0_level1 <= data_slice_regIn_tx_enable_1;
      WHEN "1000001" =>
        mux_out0_level1 <= data_slice_regIn_rx_reset_cs_1;
      WHEN "1000010" =>
        mux_out0_level1 <= data_slice_regIn_rx_src_sel_1;
      WHEN "1000011" =>
        mux_out0_level1 <= data_slice_regIn_capture_start_1;
      WHEN "1000100" =>
        mux_out0_level1 <= data_reg_regIn_capture_length_1_1;
      WHEN "1000101" =>
        mux_out0_level1 <= data_slice_regIn_capture_src_sel_1;
      WHEN "1000110" =>
        mux_out0_level1 <= data_slice_regIn_tx_output_gain_1;
      WHEN "1000111" =>
        mux_out0_level1 <= data_slice_regIn_rx_input_gain_1;
      WHEN "1001000" =>
        mux_out0_level1 <= data_slice_regIn_capture_mode_1;
      WHEN "1001001" =>
        mux_out0_level1 <= read_reg_regOut_rx_nSynced;
      WHEN "1001010" =>
        mux_out0_level1 <= data_slice_regOut_rx_normCoarseFreqEst_1;
      WHEN OTHERS => 
        mux_out0_level1 <= const_0;
    END CASE;
  END PROCESS mux0_level1_output;


  data_read <= std_logic_vector(mux_out0_level1);

  write_regIn_capture_length <= std_logic_vector(data_reg_regIn_capture_length_1_1);

  write_regIn_tx_output_gain <= std_logic_vector(data_reg_regIn_tx_output_gain_1_1);

  write_regIn_rx_input_gain <= std_logic_vector(data_reg_regIn_rx_input_gain_1_1);

  write_regIn_capture_mode <= std_logic_vector(data_reg_regIn_capture_mode_1_1);

  write_axi_enable <= data_reg_axi_enable_1_1;

  write_regIn_tx_enable <= data_reg_regIn_tx_enable_1_1;

  write_regIn_rx_reset_cs <= data_reg_regIn_rx_reset_cs_1_1;

  write_regIn_rx_src_sel <= data_reg_regIn_rx_src_sel_1_1;

  write_regIn_capture_start <= data_reg_regIn_capture_start_1_1;

  write_regIn_capture_src_sel <= data_reg_regIn_capture_src_sel_1_1;

END rtl;

