-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_src_FirRdyLogic_block1.vhd
-- Created: 2025-09-17 13:27:52
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_src_FirRdyLogic_block1
-- Source Path: hdlcoder_QPSKTxRx_RFSoC/QPSK/QPSK Tx/RRC Transmit Filter/FIR Interpolator/FIRFilter3/FirRdyLogic
-- Hierarchy Level: 5
-- Model version: 9.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY QPSK_src_FirRdyLogic_block1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dinSwitch_re                      :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En16
        dinSwitch_im                      :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En16
        dinVldSwitch                      :   IN    std_logic;
        coeff_re                          :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En16
        coeff_im                          :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En16
        haltProcess                       :   IN    std_logic;
        dinSM_re                          :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En16
        dinSM_im                          :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En16
        dinVldSM                          :   OUT   std_logic
        );
END QPSK_src_FirRdyLogic_block1;


ARCHITECTURE rtl OF QPSK_src_FirRdyLogic_block1 IS

  -- Signals
  SIGNAL dinSwitch_re_signed              : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL dinSwitch_im_signed              : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL coeff_re_signed                  : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL coeff_im_signed                  : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL syncReset                        : std_logic;
  SIGNAL firRdy_xdin_re                   : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL firRdy_xdin_im                   : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL firRdy_xdinVld                   : std_logic;
  SIGNAL firRdy_state                     : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL firRdy_readyReg                  : std_logic;
  SIGNAL firRdy_count                     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL firRdy_xcoeffin_re               : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL firRdy_xcoeffin_im               : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL firRdy_xdin_next_re              : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL firRdy_xdin_next_im              : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL firRdy_xdinVld_next              : std_logic;
  SIGNAL firRdy_state_next                : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL firRdy_readyReg_next             : std_logic;
  SIGNAL firRdy_count_next                : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL firRdy_xcoeffin_next_re          : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL firRdy_xcoeffin_next_im          : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL readySM                          : std_logic;
  SIGNAL dinSM_re_tmp                     : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL dinSM_im_tmp                     : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL coeffS_re                        : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL coeffS_im                        : signed(16 DOWNTO 0);  -- sfix17_En16

BEGIN
  dinSwitch_re_signed <= signed(dinSwitch_re);

  dinSwitch_im_signed <= signed(dinSwitch_im);

  coeff_re_signed <= signed(coeff_re);

  coeff_im_signed <= signed(coeff_im);

  syncReset <= '0';

  -- rdyLogic
  firRdy_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        firRdy_state <= to_unsigned(16#0#, 3);
        firRdy_xdin_re <= to_signed(16#00000#, 17);
        firRdy_xdin_im <= to_signed(16#00000#, 17);
        firRdy_xdinVld <= '0';
        firRdy_xcoeffin_re <= to_signed(16#00000#, 17);
        firRdy_xcoeffin_im <= to_signed(16#00000#, 17);
        firRdy_readyReg <= '1';
        firRdy_count <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        firRdy_xdin_re <= firRdy_xdin_next_re;
        firRdy_xdin_im <= firRdy_xdin_next_im;
        firRdy_xdinVld <= firRdy_xdinVld_next;
        firRdy_state <= firRdy_state_next;
        firRdy_readyReg <= firRdy_readyReg_next;
        firRdy_count <= firRdy_count_next;
        firRdy_xcoeffin_re <= firRdy_xcoeffin_next_re;
        firRdy_xcoeffin_im <= firRdy_xcoeffin_next_im;
      END IF;
    END IF;
  END PROCESS firRdy_process;

  firRdy_output : PROCESS (coeff_im_signed, coeff_re_signed, dinSwitch_im_signed, dinSwitch_re_signed,
       dinVldSwitch, firRdy_count, firRdy_readyReg, firRdy_state,
       firRdy_xcoeffin_im, firRdy_xcoeffin_re, firRdy_xdinVld, firRdy_xdin_im,
       firRdy_xdin_re, haltProcess, syncReset)
    VARIABLE out2 : std_logic;
  BEGIN
    firRdy_xdin_next_re <= firRdy_xdin_re;
    firRdy_xdin_next_im <= firRdy_xdin_im;
    firRdy_xdinVld_next <= firRdy_xdinVld;
    firRdy_state_next <= firRdy_state;
    firRdy_readyReg_next <= firRdy_readyReg;
    firRdy_count_next <= firRdy_count;
    firRdy_xcoeffin_next_re <= firRdy_xcoeffin_re;
    firRdy_xcoeffin_next_im <= firRdy_xcoeffin_im;
    IF (( NOT haltProcess) AND ( NOT syncReset)) = '1' THEN 
      CASE firRdy_state IS
        WHEN "000" =>
          dinSM_re_tmp <= dinSwitch_re_signed;
          dinSM_im_tmp <= dinSwitch_im_signed;
          out2 := dinVldSwitch;
          coeffS_re <= coeff_re_signed;
          coeffS_im <= coeff_im_signed;
          firRdy_state_next <= to_unsigned(16#0#, 3);
          firRdy_readyReg_next <= '1';
          firRdy_xdin_next_re <= to_signed(16#00000#, 17);
          firRdy_xdin_next_im <= to_signed(16#00000#, 17);
          firRdy_xdinVld_next <= '0';
          firRdy_xcoeffin_next_re <= to_signed(16#00000#, 17);
          firRdy_xcoeffin_next_im <= to_signed(16#00000#, 17);
          IF dinVldSwitch = '1' THEN 
            firRdy_state_next <= to_unsigned(16#1#, 3);
            firRdy_readyReg_next <= '0';
          END IF;
        WHEN "001" =>
          dinSM_re_tmp <= to_signed(16#00000#, 17);
          dinSM_im_tmp <= to_signed(16#00000#, 17);
          out2 := '0';
          coeffS_re <= to_signed(16#00000#, 17);
          coeffS_im <= to_signed(16#00000#, 17);
          firRdy_state_next <= to_unsigned(16#3#, 3);
          IF dinVldSwitch = '1' THEN 
            firRdy_state_next <= to_unsigned(16#2#, 3);
            firRdy_xdin_next_re <= dinSwitch_re_signed;
            firRdy_xdin_next_im <= dinSwitch_im_signed;
            firRdy_xdinVld_next <= '1';
            firRdy_xcoeffin_next_re <= coeff_re_signed;
            firRdy_xcoeffin_next_im <= coeff_im_signed;
          END IF;
        WHEN "010" =>
          dinSM_re_tmp <= to_signed(16#00000#, 17);
          dinSM_im_tmp <= to_signed(16#00000#, 17);
          out2 := '0';
          coeffS_re <= to_signed(16#00000#, 17);
          coeffS_im <= to_signed(16#00000#, 17);
          firRdy_state_next <= to_unsigned(16#2#, 3);
          IF firRdy_count = to_unsigned(16#3#, 2) THEN 
            firRdy_state_next <= to_unsigned(16#4#, 3);
          END IF;
          firRdy_readyReg_next <= '0';
        WHEN "011" =>
          IF firRdy_count = to_unsigned(16#3#, 2) THEN 
            firRdy_readyReg_next <= '1';
            firRdy_state_next <= to_unsigned(16#0#, 3);
          END IF;
          dinSM_re_tmp <= to_signed(16#00000#, 17);
          dinSM_im_tmp <= to_signed(16#00000#, 17);
          coeffS_re <= to_signed(16#00000#, 17);
          coeffS_im <= to_signed(16#00000#, 17);
          out2 := '0';
        WHEN "100" =>
          firRdy_state_next <= to_unsigned(16#3#, 3);
          dinSM_re_tmp <= firRdy_xdin_re;
          dinSM_im_tmp <= firRdy_xdin_im;
          out2 := firRdy_xdinVld;
          coeffS_re <= firRdy_xcoeffin_re;
          coeffS_im <= firRdy_xcoeffin_im;
          firRdy_xdin_next_re <= dinSwitch_re_signed;
          firRdy_xdin_next_im <= dinSwitch_im_signed;
          firRdy_xdinVld_next <= dinVldSwitch;
          firRdy_xcoeffin_next_re <= coeff_re_signed;
          firRdy_xcoeffin_next_im <= coeff_im_signed;
        WHEN OTHERS => 
          dinSM_re_tmp <= to_signed(16#00000#, 17);
          dinSM_im_tmp <= to_signed(16#00000#, 17);
          out2 := '0';
          coeffS_re <= to_signed(16#00000#, 17);
          coeffS_im <= to_signed(16#00000#, 17);
          firRdy_state_next <= to_unsigned(16#0#, 3);
          firRdy_xdin_next_re <= to_signed(16#00000#, 17);
          firRdy_xdin_next_im <= to_signed(16#00000#, 17);
          firRdy_xdinVld_next <= '0';
          firRdy_xcoeffin_next_re <= to_signed(16#00000#, 17);
          firRdy_xcoeffin_next_im <= to_signed(16#00000#, 17);
          firRdy_readyReg_next <= '1';
      END CASE;
    ELSE 
      firRdy_state_next <= to_unsigned(16#0#, 3);
      firRdy_xdin_next_re <= to_signed(16#00000#, 17);
      firRdy_xdin_next_im <= to_signed(16#00000#, 17);
      firRdy_xcoeffin_next_re <= to_signed(16#00000#, 17);
      firRdy_xcoeffin_next_im <= to_signed(16#00000#, 17);
      firRdy_xdinVld_next <= '0';
      firRdy_readyReg_next <= '0';
      dinSM_re_tmp <= to_signed(16#00000#, 17);
      dinSM_im_tmp <= to_signed(16#00000#, 17);
      out2 := '0';
      coeffS_re <= to_signed(16#00000#, 17);
      coeffS_im <= to_signed(16#00000#, 17);
    END IF;
    IF (dinVldSwitch = '1' OR (firRdy_count > to_unsigned(16#0#, 2))) OR out2 = '1' THEN 
      IF ((firRdy_count = to_unsigned(16#3#, 2)) OR haltProcess = '1') OR syncReset = '1' THEN 
        firRdy_count_next <= to_unsigned(16#0#, 2);
      ELSE 
        firRdy_count_next <= firRdy_count + to_unsigned(16#1#, 2);
      END IF;
    END IF;
    readySM <= firRdy_readyReg;
    dinVldSM <= out2;
  END PROCESS firRdy_output;


  dinSM_re <= std_logic_vector(dinSM_re_tmp);

  dinSM_im <= std_logic_vector(dinSM_im_tmp);

END rtl;

