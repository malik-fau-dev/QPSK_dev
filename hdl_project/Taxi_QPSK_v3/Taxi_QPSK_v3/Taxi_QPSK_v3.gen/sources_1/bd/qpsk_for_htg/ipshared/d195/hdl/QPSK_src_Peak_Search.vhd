-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_src_Peak_Search.vhd
-- Created: 2025-09-17 13:27:52
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_src_Peak_Search
-- Source Path: hdlcoder_QPSKTxRx_RFSoC/QPSK/QPSK Rx/Frequency and Time Synchronizer/Preamble Detector/Peak Search
-- Hierarchy Level: 4
-- Model version: 9.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY QPSK_src_Peak_Search IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_4_0                         :   IN    std_logic;
        corr                              :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En26
        thresholdExceeded                 :   IN    std_logic;
        validIn                           :   IN    std_logic;
        timingOffset                      :   OUT   std_logic_vector(10 DOWNTO 0);  -- ufix11
        timingOffsetValid                 :   OUT   std_logic
        );
END QPSK_src_Peak_Search;


ARCHITECTURE rtl OF QPSK_src_Peak_Search IS

  -- Signals
  SIGNAL corr_signed                      : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL count_step                       : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL count_from                       : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL timing_Reference_out1            : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL count                            : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL count_1                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Logical_Operator4_out1           : std_logic;
  SIGNAL Unit_Delay_Enabled_Resettable_Synchronous_out1 : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL Relational_Operator_out1         : std_logic;
  SIGNAL Unit_Delay_Enabled_Synchronous_out1 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Unit_Delay_Enabled_Resettable_Synchronous1_out1 : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;

BEGIN
  -- peak picker

  corr_signed <= signed(corr);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1132
  count_step <= to_unsigned(16#001#, 11);

  count_from <= to_unsigned(16#000#, 11);

  count <= timing_Reference_out1 + count_step;

  
  need_to_wrap <= '1' WHEN timing_Reference_out1 = to_unsigned(16#46C#, 11) ELSE
      '0';

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  
  count_1 <= timing_Reference_out1 WHEN validIn = '0' ELSE
      count_value;

  timing_Reference_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        timing_Reference_out1 <= to_unsigned(16#000#, 11);
      ELSIF enb_1_4_0 = '1' THEN
        timing_Reference_out1 <= count_1;
      END IF;
    END IF;
  END PROCESS timing_Reference_process;


  
  Compare_To_Constant_out1 <= '1' WHEN timing_Reference_out1 = to_unsigned(16#46C#, 11) ELSE
      '0';

  Logical_Operator_out1 <= validIn AND Compare_To_Constant_out1;

  Unit_Delay_Enabled_Resettable_Synchronous_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Unit_Delay_Enabled_Resettable_Synchronous_out1 <= to_signed(0, 33);
      ELSIF enb_1_4_0 = '1' THEN
        IF Logical_Operator_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable_Synchronous_out1 <= to_signed(0, 33);
        ELSIF Logical_Operator4_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable_Synchronous_out1 <= corr_signed;
        END IF;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable_Synchronous_process;


  
  Relational_Operator_out1 <= '1' WHEN corr_signed > Unit_Delay_Enabled_Resettable_Synchronous_out1 ELSE
      '0';

  Logical_Operator4_out1 <= Relational_Operator_out1 AND thresholdExceeded;

  Unit_Delay_Enabled_Synchronous_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Unit_Delay_Enabled_Synchronous_out1 <= to_unsigned(16#000#, 11);
      ELSIF enb_1_4_0 = '1' AND Logical_Operator4_out1 = '1' THEN
        Unit_Delay_Enabled_Synchronous_out1 <= timing_Reference_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Synchronous_process;


  timingOffset <= std_logic_vector(Unit_Delay_Enabled_Synchronous_out1);

  Unit_Delay_Enabled_Resettable_Synchronous1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Unit_Delay_Enabled_Resettable_Synchronous1_out1 <= '0';
      ELSIF enb_1_4_0 = '1' THEN
        IF Logical_Operator_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable_Synchronous1_out1 <= '0';
        ELSIF thresholdExceeded = '1' THEN
          Unit_Delay_Enabled_Resettable_Synchronous1_out1 <= thresholdExceeded;
        END IF;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable_Synchronous1_process;


  Logical_Operator1_out1 <= Unit_Delay_Enabled_Resettable_Synchronous1_out1 AND Logical_Operator_out1;

  timingOffsetValid <= Logical_Operator1_out1;

END rtl;

