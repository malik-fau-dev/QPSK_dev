-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_src_sumTree.vhd
-- Created: 2025-09-17 13:27:52
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_src_sumTree
-- Source Path: hdlcoder_QPSKTxRx_RFSoC/QPSK/From ADC/Vector Decimation/FIR Decimator/sumTree
-- Hierarchy Level: 4
-- Model version: 9.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.QPSK_src_QPSK_pkg.ALL;

ENTITY QPSK_src_sumTree IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        filterOut_re                      :   IN    vector_of_std_logic_vector33(0 TO 3);  -- sfix33_En30 [4]
        filterOut_im                      :   IN    vector_of_std_logic_vector33(0 TO 3);  -- sfix33_En30 [4]
        filterOut_vld                     :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(32 DOWNTO 0);  -- sfix33_En30
        dataOut_im                        :   OUT   std_logic_vector(32 DOWNTO 0);  -- sfix33_En30
        validOut                          :   OUT   std_logic
        );
END QPSK_src_sumTree;


ARCHITECTURE rtl OF QPSK_src_sumTree IS

  -- Signals
  SIGNAL filterOut_0_re                   : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL filterOut_0_im                   : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL filterOut_1_re                   : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL filterOut_1_im                   : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL accS_1_re                        : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL accS_1_im                        : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL accReg_1_re                      : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL accReg_1_im                      : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL filterOut_2_re                   : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL filterOut_2_im                   : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL filterOut_3_re                   : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL filterOut_3_im                   : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL accS_2_re                        : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL accS_2_im                        : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL accReg_2_re                      : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL accReg_2_im                      : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL accS_1_re_1                      : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL accS_1_im_1                      : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL accReg_1_re_1                    : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL accReg_1_im_1                    : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL dataOut_re_tmp                   : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL dataOut_im_tmp                   : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL intdelay_reg                     : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]

BEGIN
  filterOut_0_re <= signed(filterOut_re(0));

  filterOut_0_im <= signed(filterOut_im(0));

  filterOut_1_re <= signed(filterOut_re(1));

  filterOut_1_im <= signed(filterOut_im(1));

  accS_1_re <= filterOut_0_re + filterOut_1_re;
  accS_1_im <= filterOut_0_im + filterOut_1_im;

  intdelay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        accReg_1_re <= to_signed(0, 33);
        accReg_1_im <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        accReg_1_re <= accS_1_re;
        accReg_1_im <= accS_1_im;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  filterOut_2_re <= signed(filterOut_re(2));

  filterOut_2_im <= signed(filterOut_im(2));

  filterOut_3_re <= signed(filterOut_re(3));

  filterOut_3_im <= signed(filterOut_im(3));

  accS_2_re <= filterOut_2_re + filterOut_3_re;
  accS_2_im <= filterOut_2_im + filterOut_3_im;

  intdelay_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        accReg_2_re <= to_signed(0, 33);
        accReg_2_im <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        accReg_2_re <= accS_2_re;
        accReg_2_im <= accS_2_im;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  accS_1_re_1 <= accReg_1_re + accReg_2_re;
  accS_1_im_1 <= accReg_1_im + accReg_2_im;

  intdelay_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        accReg_1_re_1 <= to_signed(0, 33);
        accReg_1_im_1 <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        accReg_1_re_1 <= accS_1_re_1;
        accReg_1_im_1 <= accS_1_im_1;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dataOut_re_tmp <= to_signed(0, 33);
        dataOut_im_tmp <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        dataOut_re_tmp <= accReg_1_re_1;
        dataOut_im_tmp <= accReg_1_im_1;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  dataOut_re <= std_logic_vector(dataOut_re_tmp);

  dataOut_im <= std_logic_vector(dataOut_im_tmp);

  intdelay_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        intdelay_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        intdelay_reg(0) <= filterOut_vld;
        intdelay_reg(2 DOWNTO 1) <= intdelay_reg(1 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS intdelay_4_process;

  validOut <= intdelay_reg(2);

END rtl;

