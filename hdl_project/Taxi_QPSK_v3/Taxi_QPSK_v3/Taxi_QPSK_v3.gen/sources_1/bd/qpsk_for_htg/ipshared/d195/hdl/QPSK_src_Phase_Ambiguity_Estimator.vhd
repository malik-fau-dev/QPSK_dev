-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_src_Phase_Ambiguity_Estimator.vhd
-- Created: 2025-09-17 13:27:52
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_src_Phase_Ambiguity_Estimator
-- Source Path: hdlcoder_QPSKTxRx_RFSoC/QPSK/QPSK Rx/Frequency and Time Synchronizer/Phase Ambiguity Estimation and 
-- Correction/Phase Ambiguity Estimato
-- Hierarchy Level: 4
-- Model version: 9.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.QPSK_src_QPSK_pkg.ALL;

ENTITY QPSK_src_Phase_Ambiguity_Estimator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_4_0                         :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        syncPulse                         :   IN    std_logic;
        validIn                           :   IN    std_logic;
        endOut                            :   OUT   std_logic;
        estOut_re                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En29
        estOut_im                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En29
        validOut                          :   OUT   std_logic
        );
END QPSK_src_Phase_Ambiguity_Estimator;


ARCHITECTURE rtl OF QPSK_src_Phase_Ambiguity_Estimator IS

  -- Component Declarations
  COMPONENT QPSK_src_Subsystem
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          L                               :   IN    std_logic;
          H                               :   IN    std_logic;
          Out2                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT QPSK_src_Subsystem1
    PORT( In1                             :   IN    std_logic;
          In2                             :   IN    std_logic;
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : QPSK_src_Subsystem
    USE ENTITY work.QPSK_src_Subsystem(rtl);

  FOR ALL : QPSK_src_Subsystem1
    USE ENTITY work.QPSK_src_Subsystem1(rtl);

  -- Constants
  CONSTANT Direct_Lookup_Table_n_D_table_data_re : vector_of_signed16(0 TO 7) := 
    (to_signed(-16#5A82#, 16), to_signed(-16#5A82#, 16), to_signed(16#5A82#, 16), to_signed(16#5A82#, 16),
     to_signed(-16#5A82#, 16), to_signed(-16#5A82#, 16), to_signed(16#5A82#, 16), to_signed(-16#5A82#, 16));  -- sfix16 [8]
  CONSTANT Direct_Lookup_Table_n_D_table_data_im : vector_of_signed16(0 TO 7) := 
    (to_signed(-16#5A82#, 16), to_signed(-16#5A82#, 16), to_signed(16#5A82#, 16), to_signed(16#5A82#, 16),
     to_signed(-16#5A82#, 16), to_signed(-16#5A82#, 16), to_signed(16#5A82#, 16), to_signed(-16#5A82#, 16));  -- sfix16 [8]

  -- Signals
  SIGNAL count_step                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL count_from                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL count_reset                      : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL HDL_Counter_out1                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL count                            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem1_validOut              : std_logic;
  SIGNAL count_1                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem_Out2                   : std_logic;
  SIGNAL count_2                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Delay11_reg                      : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL Delay11_out1                     : std_logic;
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay5_reg_re                    : vector_of_signed16(0 TO 1) := (OTHERS => to_signed(16#0000#, 16));  -- sfix16_En14 [2]
  SIGNAL Delay5_reg_im                    : vector_of_signed16(0 TO 1) := (OTHERS => to_signed(16#0000#, 16));  -- sfix16_En14 [2]
  SIGNAL Delay5_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay5_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product_C2ReIm_1_C2ReIm_A        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay8_out1                      : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Direct_Lookup_Table_n_D_out1_re  : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Direct_Lookup_Table_n_D_out1_im  : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Direct_Lookup_Table_n_D_out1_re_1 : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En15
  SIGNAL Direct_Lookup_Table_n_D_out1_im_1 : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En15
  SIGNAL conj_cast                        : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL conj_cast_1                      : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL Math_Function_out1_re            : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Math_Function_out1_im            : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay4_reg_re                    : vector_of_signed16(0 TO 1) := (OTHERS => to_signed(16#0000#, 16));  -- sfix16_En15 [2]
  SIGNAL Delay4_reg_im                    : vector_of_signed16(0 TO 1) := (OTHERS => to_signed(16#0000#, 16));  -- sfix16_En15 [2]
  SIGNAL Delay4_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay4_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Product_Re_AC                    : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL Product_C2ReIm_1_C2ReIm_B        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product_Im_AD                    : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL mulOutput                        : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL MultiplyAdd_add_sub_cast         : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL MultiplyAdd_add_sub_cast_1       : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL mulOutput_1                      : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL mulOutput_2                      : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL mulOutput_3                      : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL MultiplyAdd1_add_add_cast        : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL MultiplyAdd1_add_add_cast_1      : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL mulOutput_4                      : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL mulOutput_5                      : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL Delay9_reg_re                    : vector_of_signed32(0 TO 1) := (OTHERS => to_signed(0, 32));  -- sfix32_En29 [2]
  SIGNAL Delay9_reg_im                    : vector_of_signed32(0 TO 1) := (OTHERS => to_signed(0, 32));  -- sfix32_En29 [2]
  SIGNAL Delay9_out1_re                   : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL Delay9_out1_im                   : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL Delay10_reg                      : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL Delay10_out1                     : std_logic;

  ATTRIBUTE use_dsp : string;

  ATTRIBUTE use_dsp OF mulOutput : SIGNAL IS "yes";
  ATTRIBUTE use_dsp OF mulOutput_3 : SIGNAL IS "yes";

BEGIN
  u_Subsystem : QPSK_src_Subsystem
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              L => syncPulse,
              H => Logical_Operator_out1,
              Out2 => Subsystem_Out2
              );

  u_Subsystem1 : QPSK_src_Subsystem1
    PORT MAP( In1 => Subsystem_Out2,
              In2 => validIn,
              validOut => Subsystem1_validOut
              );

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 7
  count_step <= to_unsigned(16#1#, 3);

  count_from <= to_unsigned(16#0#, 3);

  count_reset <= to_unsigned(16#0#, 3);

  count <= HDL_Counter_out1 + count_step;

  
  need_to_wrap <= '1' WHEN HDL_Counter_out1 = to_unsigned(16#7#, 3) ELSE
      '0';

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  
  count_1 <= HDL_Counter_out1 WHEN Subsystem1_validOut = '0' ELSE
      count_value;

  
  count_2 <= count_1 WHEN Subsystem_Out2 = '0' ELSE
      count_reset;

  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HDL_Counter_out1 <= to_unsigned(16#0#, 3);
      ELSIF enb_1_4_0 = '1' THEN
        HDL_Counter_out1 <= count_2;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  
  Compare_To_Constant_out1 <= '1' WHEN HDL_Counter_out1 = to_unsigned(16#7#, 3) ELSE
      '0';

  Logical_Operator_out1 <= Subsystem1_validOut AND Compare_To_Constant_out1;

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_reg <= (OTHERS => '0');
      ELSIF enb_1_4_0 = '1' THEN
        Delay11_reg(0) <= Logical_Operator_out1;
        Delay11_reg(4 DOWNTO 1) <= Delay11_reg(3 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay11_process;

  Delay11_out1 <= Delay11_reg(4);

  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_re <= to_signed(16#0000#, 16);
        Delay1_out1_im <= to_signed(16#0000#, 16);
      ELSIF enb_1_4_0 = '1' THEN
        Delay1_out1_re <= dataIn_re_signed;
        Delay1_out1_im <= dataIn_im_signed;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        Delay5_reg_im(0) <= Delay1_out1_im;
        Delay5_reg_im(1) <= Delay5_reg_im(0);
        Delay5_reg_re(0) <= Delay1_out1_re;
        Delay5_reg_re(1) <= Delay5_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1_re <= Delay5_reg_re(1);
  Delay5_out1_im <= Delay5_reg_im(1);

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Product_C2ReIm_1_C2ReIm_A <= to_signed(16#0000#, 16);
      ELSIF enb_1_4_0 = '1' THEN
        Product_C2ReIm_1_C2ReIm_A <= Delay5_out1_re;
      END IF;
    END IF;
  END PROCESS reduced_process;


  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1 <= to_unsigned(16#0#, 3);
      ELSIF enb_1_4_0 = '1' THEN
        Delay8_out1 <= HDL_Counter_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  Direct_Lookup_Table_n_D_out1_re <= Direct_Lookup_Table_n_D_table_data_re(to_integer(Delay8_out1));
  Direct_Lookup_Table_n_D_out1_im <= Direct_Lookup_Table_n_D_table_data_im(to_integer(Delay8_out1));

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        Direct_Lookup_Table_n_D_out1_re_1 <= Direct_Lookup_Table_n_D_out1_re;
        Direct_Lookup_Table_n_D_out1_im_1 <= Direct_Lookup_Table_n_D_out1_im;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Math_Function_out1_re <= Direct_Lookup_Table_n_D_out1_re_1;
  conj_cast <= resize(Direct_Lookup_Table_n_D_out1_im_1, 17);
  conj_cast_1 <=  - (conj_cast);
  
  Math_Function_out1_im <= X"7FFF" WHEN (conj_cast_1(16) = '0') AND (conj_cast_1(15) /= '0') ELSE
      X"8000" WHEN (conj_cast_1(16) = '1') AND (conj_cast_1(15) /= '1') ELSE
      conj_cast_1(15 DOWNTO 0);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        Delay4_reg_im(0) <= Math_Function_out1_im;
        Delay4_reg_im(1) <= Delay4_reg_im(0);
        Delay4_reg_re(0) <= Math_Function_out1_re;
        Delay4_reg_re(1) <= Delay4_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1_re <= Delay4_reg_re(1);
  Delay4_out1_im <= Delay4_reg_im(1);

  Product_Re_AC <= Product_C2ReIm_1_C2ReIm_A * Delay4_out1_re;

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Product_C2ReIm_1_C2ReIm_B <= to_signed(16#0000#, 16);
      ELSIF enb_1_4_0 = '1' THEN
        Product_C2ReIm_1_C2ReIm_B <= Delay5_out1_im;
      END IF;
    END IF;
  END PROCESS reduced_1_process;


  Product_Im_AD <= Product_C2ReIm_1_C2ReIm_A * Delay4_out1_im;

  mulOutput <= Product_C2ReIm_1_C2ReIm_B * Delay4_out1_im;

  MultiplyAdd_add_sub_cast <= resize(Product_Re_AC, 33);
  MultiplyAdd_add_sub_cast_1 <= resize(mulOutput, 33);
  mulOutput_1 <= MultiplyAdd_add_sub_cast - MultiplyAdd_add_sub_cast_1;

  mulOutput_2 <= mulOutput_1(31 DOWNTO 0);

  mulOutput_3 <= Product_C2ReIm_1_C2ReIm_B * Delay4_out1_re;

  MultiplyAdd1_add_add_cast <= resize(Product_Im_AD, 33);
  MultiplyAdd1_add_add_cast_1 <= resize(mulOutput_3, 33);
  mulOutput_4 <= MultiplyAdd1_add_add_cast + MultiplyAdd1_add_add_cast_1;

  mulOutput_5 <= mulOutput_4(31 DOWNTO 0);

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        Delay9_reg_im(0) <= mulOutput_5;
        Delay9_reg_im(1) <= Delay9_reg_im(0);
        Delay9_reg_re(0) <= mulOutput_2;
        Delay9_reg_re(1) <= Delay9_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay9_process;

  Delay9_out1_re <= Delay9_reg_re(1);
  Delay9_out1_im <= Delay9_reg_im(1);

  estOut_re <= std_logic_vector(Delay9_out1_re);

  estOut_im <= std_logic_vector(Delay9_out1_im);

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_reg <= (OTHERS => '0');
      ELSIF enb_1_4_0 = '1' THEN
        Delay10_reg(0) <= Subsystem1_validOut;
        Delay10_reg(4 DOWNTO 1) <= Delay10_reg(3 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay10_process;

  Delay10_out1 <= Delay10_reg(4);

  endOut <= Delay11_out1;

  validOut <= Delay10_out1;

END rtl;

