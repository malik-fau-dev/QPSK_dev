-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_src_Reset_Generator.vhd
-- Created: 2025-09-17 13:27:52
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_src_Reset_Generator
-- Source Path: hdlcoder_QPSKTxRx_RFSoC/QPSK/QPSK Rx/Frequency and Time Synchronizer/Coarse Frequency Compensator/Coarse 
-- Frequency Estimator/Integrator/Reset Generato
-- Hierarchy Level: 6
-- Model version: 9.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY QPSK_src_Reset_Generator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_4_0                         :   IN    std_logic;
        validIn                           :   IN    std_logic;
        reset_1                           :   OUT   std_logic
        );
END QPSK_src_Reset_Generator;


ARCHITECTURE rtl OF QPSK_src_Reset_Generator IS

  -- Signals
  SIGNAL count_step                       : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL count_from                       : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL HDL_Counter_out1                 : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL count                            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL count_1                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay5_out1                      : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;

BEGIN
  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 32768
  count_step <= to_unsigned(16#0001#, 16);

  count_from <= to_unsigned(16#0000#, 16);

  count <= HDL_Counter_out1 + count_step;

  
  need_to_wrap <= '1' WHEN HDL_Counter_out1 = to_unsigned(16#8000#, 16) ELSE
      '0';

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  
  count_1 <= HDL_Counter_out1 WHEN validIn = '0' ELSE
      count_value;

  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HDL_Counter_out1 <= to_unsigned(16#0000#, 16);
      ELSIF enb_1_4_0 = '1' THEN
        HDL_Counter_out1 <= count_1;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb_1_4_0 = '1' THEN
        Delay1_out1 <= validIn;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= to_unsigned(16#0000#, 16);
      ELSIF enb_1_4_0 = '1' THEN
        Delay5_out1 <= HDL_Counter_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  
  Compare_To_Constant_out1 <= '1' WHEN Delay5_out1 = to_unsigned(16#8000#, 16) ELSE
      '0';

  Logical_Operator_out1 <= Delay1_out1 AND Compare_To_Constant_out1;

  reset_1 <= Logical_Operator_out1;

END rtl;

