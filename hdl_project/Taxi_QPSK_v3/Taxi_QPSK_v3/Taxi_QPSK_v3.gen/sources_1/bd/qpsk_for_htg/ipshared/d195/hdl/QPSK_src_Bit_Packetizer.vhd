-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_src_Bit_Packetizer.vhd
-- Created: 2025-09-17 13:27:52
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_src_Bit_Packetizer
-- Source Path: hdlcoder_QPSKTxRx_RFSoC/QPSK/QPSK Tx/Bit Packetizer
-- Hierarchy Level: 2
-- Model version: 9.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY QPSK_src_Bit_Packetizer IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn                            :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        validIn                           :   IN    std_logic;
        bitsOut                           :   OUT   std_logic;
        dataStart                         :   OUT   std_logic;
        dataEnd                           :   OUT   std_logic;
        bitsValid                         :   OUT   std_logic;
        dataReady                         :   OUT   std_logic
        );
END QPSK_src_Bit_Packetizer;


ARCHITECTURE rtl OF QPSK_src_Bit_Packetizer IS

  -- Component Declarations
  COMPONENT QPSK_src_Clocks
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          bitClk                          :   OUT   std_logic;
          symClk                          :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT QPSK_src_Packet_Controller_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enable                          :   IN    std_logic;
          fifoNum                         :   IN    std_logic_vector(10 DOWNTO 0);  -- ufix11
          bitClk                          :   IN    std_logic;
          symbolClk                       :   IN    std_logic;
          dataStart                       :   OUT   std_logic;
          dataEnd                         :   OUT   std_logic;
          dataSel                         :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          dataRd                          :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT QPSK_src_Bits_Store
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataSel                         :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          dataRd                          :   IN    std_logic;
          dataIn                          :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          validIn                         :   IN    std_logic;
          dataOut                         :   OUT   std_logic;
          validOut                        :   OUT   std_logic;
          fifoNum                         :   OUT   std_logic_vector(10 DOWNTO 0);  -- ufix11
          fifoReady                       :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : QPSK_src_Clocks
    USE ENTITY work.QPSK_src_Clocks(rtl);

  FOR ALL : QPSK_src_Packet_Controller_block
    USE ENTITY work.QPSK_src_Packet_Controller_block(rtl);

  FOR ALL : QPSK_src_Bits_Store
    USE ENTITY work.QPSK_src_Bits_Store(rtl);

  -- Signals
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL Clocks_bitClk                    : std_logic;
  SIGNAL Clocks_symClk                    : std_logic;
  SIGNAL Bits_Store_fifoNum               : std_logic_vector(10 DOWNTO 0);  -- ufix11
  SIGNAL dataStart_1                      : std_logic;
  SIGNAL dataEnd_1                        : std_logic;
  SIGNAL dataSel                          : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL dataRd                           : std_logic;
  SIGNAL txBitOut                         : std_logic;
  SIGNAL txBitValid                       : std_logic;
  SIGNAL Bits_Store_fifoReady             : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Delay5_out1                      : std_logic;

BEGIN
  u_Clocks : QPSK_src_Clocks
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              bitClk => Clocks_bitClk,
              symClk => Clocks_symClk
              );

  u_Packet_Controller : QPSK_src_Packet_Controller_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enable => Constant_out1,
              fifoNum => Bits_Store_fifoNum,  -- ufix11
              bitClk => Clocks_bitClk,
              symbolClk => Clocks_symClk,
              dataStart => dataStart_1,
              dataEnd => dataEnd_1,
              dataSel => dataSel,  -- ufix2
              dataRd => dataRd
              );

  u_Bits_Store : QPSK_src_Bits_Store
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataSel => dataSel,  -- ufix2
              dataRd => dataRd,
              dataIn => dataIn,  -- uint32
              validIn => validIn,
              dataOut => txBitOut,
              validOut => txBitValid,
              fifoNum => Bits_Store_fifoNum,  -- ufix11
              fifoReady => Bits_Store_fifoReady
              );

  Constant_out1 <= '1';

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay4_out1 <= txBitOut;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay_out1 <= dataStart_1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay2_out1 <= Delay_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1 <= dataEnd_1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1 <= Delay1_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay5_out1 <= txBitValid;
      END IF;
    END IF;
  END PROCESS Delay5_process;



  bitsOut <= Delay4_out1;

  dataStart <= Delay2_out1;

  dataEnd <= Delay3_out1;

  bitsValid <= Delay5_out1;

  dataReady <= Bits_Store_fifoReady;

END rtl;

