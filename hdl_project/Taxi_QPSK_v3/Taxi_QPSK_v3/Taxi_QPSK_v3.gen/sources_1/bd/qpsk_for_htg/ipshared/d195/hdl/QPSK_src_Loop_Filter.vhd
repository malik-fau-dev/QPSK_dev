-- -------------------------------------------------------------
-- 
-- File Name: C:\QPSK\hdl_prj_zcu111\hdlsrc\hdlcoder_QPSKTxRx_RFSoC\QPSK_src_Loop_Filter.vhd
-- Created: 2025-09-17 13:27:52
-- 
-- Generated by MATLAB 25.1, HDL Coder 25.1, and Simulink 25.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_src_Loop_Filter
-- Source Path: hdlcoder_QPSKTxRx_RFSoC/QPSK/QPSK Rx/Digital AGC/Automatic Gain Control/Loop Filter
-- Hierarchy Level: 4
-- Model version: 9.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.QPSK_src_QPSK_pkg.ALL;

ENTITY QPSK_src_Loop_Filter IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        error_rsvd                        :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En12
        enable                            :   IN    std_logic;
        gain                              :   OUT   std_logic_vector(24 DOWNTO 0)  -- sfix25_En17
        );
END QPSK_src_Loop_Filter;


ARCHITECTURE rtl OF QPSK_src_Loop_Filter IS

  -- Signals
  SIGNAL error_signed                     : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL Delay1_reg                       : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Delay1_out1                      : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL Gain_out1                        : signed(35 DOWNTO 0);  -- sfix36_En39
  SIGNAL Delay4_reg                       : vector_of_signed36(0 TO 1);  -- sfix36 [2]
  SIGNAL Delay4_out1                      : signed(35 DOWNTO 0);  -- sfix36_En39
  SIGNAL Unit_Delay_Enabled_Synchronous_out1 : signed(24 DOWNTO 0);  -- sfix25_En17
  SIGNAL Sum_add_cast                     : signed(35 DOWNTO 0);  -- sfix36_En28
  SIGNAL Sum_add_cast_1                   : signed(36 DOWNTO 0);  -- sfix37_En28
  SIGNAL Sum_add_cast_2                   : signed(35 DOWNTO 0);  -- sfix36_En28
  SIGNAL Sum_add_cast_3                   : signed(36 DOWNTO 0);  -- sfix37_En28
  SIGNAL Sum_add_temp                     : signed(36 DOWNTO 0);  -- sfix37_En28
  SIGNAL Sum_out1                         : signed(35 DOWNTO 0);  -- sfix36_En28
  SIGNAL Data_Type_Conversion_out1        : signed(24 DOWNTO 0);  -- sfix25_En17

BEGIN
  error_signed <= signed(error_rsvd);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_reg <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb = '1' THEN
        Delay1_reg(0) <= error_signed;
        Delay1_reg(1) <= Delay1_reg(0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(1);

  Gain_out1 <= to_signed(16#10625#, 18) * Delay1_out1;

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_reg <= (OTHERS => to_signed(0, 36));
      ELSIF enb = '1' THEN
        Delay4_reg(0) <= Gain_out1;
        Delay4_reg(1) <= Delay4_reg(0);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1 <= Delay4_reg(1);

  Sum_add_cast <= resize(Delay4_out1(35 DOWNTO 11), 36);
  Sum_add_cast_1 <= resize(Sum_add_cast, 37);
  Sum_add_cast_2 <= Unit_Delay_Enabled_Synchronous_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  Sum_add_cast_3 <= resize(Sum_add_cast_2, 37);
  Sum_add_temp <= Sum_add_cast_1 + Sum_add_cast_3;
  
  Sum_out1 <= X"7FFFFFFFF" WHEN (Sum_add_temp(36) = '0') AND (Sum_add_temp(35) /= '0') ELSE
      X"800000000" WHEN (Sum_add_temp(36) = '1') AND (Sum_add_temp(35) /= '1') ELSE
      Sum_add_temp(35 DOWNTO 0);

  Data_Type_Conversion_out1 <= Sum_out1(35 DOWNTO 11);

  Unit_Delay_Enabled_Synchronous_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Unit_Delay_Enabled_Synchronous_out1 <= to_signed(16#0010000#, 25);
      ELSIF enb = '1' AND enable = '1' THEN
        Unit_Delay_Enabled_Synchronous_out1 <= Data_Type_Conversion_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Synchronous_process;


  gain <= std_logic_vector(Unit_Delay_Enabled_Synchronous_out1);

END rtl;

